ARM GAS  /var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//ccjDr6p3.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32f1xx_it.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.NMI_Handler,"ax",%progbits
  16              		.align	1
  17              		.global	NMI_Handler
  18              		.arch armv7-m
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu softvfp
  24              	NMI_Handler:
  25              	.LFB66:
  26              		.file 1 "Src/stm32f1xx_it.c"
   1:Src/stm32f1xx_it.c **** /**
   2:Src/stm32f1xx_it.c ****   ******************************************************************************
   3:Src/stm32f1xx_it.c ****   * @file    stm32f1xx_it.c
   4:Src/stm32f1xx_it.c ****   * @brief   Interrupt Service Routines.
   5:Src/stm32f1xx_it.c ****   ******************************************************************************
   6:Src/stm32f1xx_it.c ****   *
   7:Src/stm32f1xx_it.c ****   * COPYRIGHT(c) 2017 STMicroelectronics
   8:Src/stm32f1xx_it.c ****   *
   9:Src/stm32f1xx_it.c ****   * Redistribution and use in source and binary forms, with or without modification,
  10:Src/stm32f1xx_it.c ****   * are permitted provided that the following conditions are met:
  11:Src/stm32f1xx_it.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  12:Src/stm32f1xx_it.c ****   *      this list of conditions and the following disclaimer.
  13:Src/stm32f1xx_it.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  14:Src/stm32f1xx_it.c ****   *      this list of conditions and the following disclaimer in the documentation
  15:Src/stm32f1xx_it.c ****   *      and/or other materials provided with the distribution.
  16:Src/stm32f1xx_it.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  17:Src/stm32f1xx_it.c ****   *      may be used to endorse or promote products derived from this software
  18:Src/stm32f1xx_it.c ****   *      without specific prior written permission.
  19:Src/stm32f1xx_it.c ****   *
  20:Src/stm32f1xx_it.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:Src/stm32f1xx_it.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:Src/stm32f1xx_it.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  23:Src/stm32f1xx_it.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  24:Src/stm32f1xx_it.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  25:Src/stm32f1xx_it.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  26:Src/stm32f1xx_it.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  27:Src/stm32f1xx_it.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  28:Src/stm32f1xx_it.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  29:Src/stm32f1xx_it.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  30:Src/stm32f1xx_it.c ****   *
  31:Src/stm32f1xx_it.c ****   ******************************************************************************
  32:Src/stm32f1xx_it.c ****   */
ARM GAS  /var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//ccjDr6p3.s 			page 2


  33:Src/stm32f1xx_it.c **** /* Includes ------------------------------------------------------------------*/
  34:Src/stm32f1xx_it.c **** #include "stm32f1xx_hal.h"
  35:Src/stm32f1xx_it.c **** #include "stm32f1xx.h"
  36:Src/stm32f1xx_it.c **** #include "stm32f1xx_it.h"
  37:Src/stm32f1xx_it.c **** #include "defines.h"
  38:Src/stm32f1xx_it.c **** #include "config.h"
  39:Src/stm32f1xx_it.c **** #include "util.h"
  40:Src/stm32f1xx_it.c **** 
  41:Src/stm32f1xx_it.c **** extern DMA_HandleTypeDef hdma_i2c2_rx;
  42:Src/stm32f1xx_it.c **** extern DMA_HandleTypeDef hdma_i2c2_tx;
  43:Src/stm32f1xx_it.c **** extern I2C_HandleTypeDef hi2c2;
  44:Src/stm32f1xx_it.c **** 
  45:Src/stm32f1xx_it.c **** extern DMA_HandleTypeDef hdma_usart2_rx;
  46:Src/stm32f1xx_it.c **** extern DMA_HandleTypeDef hdma_usart2_tx;
  47:Src/stm32f1xx_it.c **** extern DMA_HandleTypeDef hdma_usart3_rx;
  48:Src/stm32f1xx_it.c **** extern DMA_HandleTypeDef hdma_usart3_tx;
  49:Src/stm32f1xx_it.c **** 
  50:Src/stm32f1xx_it.c **** /* USER CODE BEGIN 0 */
  51:Src/stm32f1xx_it.c **** extern UART_HandleTypeDef huart2;
  52:Src/stm32f1xx_it.c **** extern UART_HandleTypeDef huart3;
  53:Src/stm32f1xx_it.c **** /* USER CODE END 0 */
  54:Src/stm32f1xx_it.c **** 
  55:Src/stm32f1xx_it.c **** /* External variables --------------------------------------------------------*/
  56:Src/stm32f1xx_it.c **** 
  57:Src/stm32f1xx_it.c **** 
  58:Src/stm32f1xx_it.c **** /******************************************************************************/
  59:Src/stm32f1xx_it.c **** /*            Cortex-M3 Processor Interruption and Exception Handlers         */
  60:Src/stm32f1xx_it.c **** /******************************************************************************/
  61:Src/stm32f1xx_it.c **** 
  62:Src/stm32f1xx_it.c **** /**
  63:Src/stm32f1xx_it.c **** * @brief This function handles Non maskable interrupt.
  64:Src/stm32f1xx_it.c **** */
  65:Src/stm32f1xx_it.c **** void NMI_Handler(void) {
  27              		.loc 1 65 24 view -0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  66:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  67:Src/stm32f1xx_it.c **** 
  68:Src/stm32f1xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 0 */
  69:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  70:Src/stm32f1xx_it.c **** 
  71:Src/stm32f1xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 1 */
  72:Src/stm32f1xx_it.c **** }
  32              		.loc 1 72 1 view .LVU1
  33 0000 7047     		bx	lr
  34              		.cfi_endproc
  35              	.LFE66:
  37              		.section	.text.HardFault_Handler,"ax",%progbits
  38              		.align	1
  39              		.global	HardFault_Handler
  40              		.syntax unified
  41              		.thumb
  42              		.thumb_func
  43              		.fpu softvfp
  45              	HardFault_Handler:
ARM GAS  /var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//ccjDr6p3.s 			page 3


  46              	.LFB67:
  73:Src/stm32f1xx_it.c **** 
  74:Src/stm32f1xx_it.c **** /**
  75:Src/stm32f1xx_it.c **** * @brief This function handles Hard fault interrupt.
  76:Src/stm32f1xx_it.c **** */
  77:Src/stm32f1xx_it.c **** void HardFault_Handler(void) {
  47              		.loc 1 77 30 view -0
  48              		.cfi_startproc
  49              		@ Volatile: function does not return.
  50              		@ args = 0, pretend = 0, frame = 0
  51              		@ frame_needed = 0, uses_anonymous_args = 0
  52              		@ link register save eliminated.
  53              	.L3:
  78:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 0 */
  79:Src/stm32f1xx_it.c **** 
  80:Src/stm32f1xx_it.c ****   /* USER CODE END HardFault_IRQn 0 */
  81:Src/stm32f1xx_it.c ****   while(1) {
  54              		.loc 1 81 3 discriminator 1 view .LVU3
  82:Src/stm32f1xx_it.c ****   }
  55              		.loc 1 82 3 discriminator 1 view .LVU4
  81:Src/stm32f1xx_it.c ****   }
  56              		.loc 1 81 8 discriminator 1 view .LVU5
  57 0000 FEE7     		b	.L3
  58              		.cfi_endproc
  59              	.LFE67:
  61              		.section	.text.MemManage_Handler,"ax",%progbits
  62              		.align	1
  63              		.global	MemManage_Handler
  64              		.syntax unified
  65              		.thumb
  66              		.thumb_func
  67              		.fpu softvfp
  69              	MemManage_Handler:
  70              	.LFB68:
  83:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 1 */
  84:Src/stm32f1xx_it.c **** 
  85:Src/stm32f1xx_it.c ****   /* USER CODE END HardFault_IRQn 1 */
  86:Src/stm32f1xx_it.c **** }
  87:Src/stm32f1xx_it.c **** 
  88:Src/stm32f1xx_it.c **** /**
  89:Src/stm32f1xx_it.c **** * @brief This function handles Memory management fault.
  90:Src/stm32f1xx_it.c **** */
  91:Src/stm32f1xx_it.c **** void MemManage_Handler(void) {
  71              		.loc 1 91 30 view -0
  72              		.cfi_startproc
  73              		@ Volatile: function does not return.
  74              		@ args = 0, pretend = 0, frame = 0
  75              		@ frame_needed = 0, uses_anonymous_args = 0
  76              		@ link register save eliminated.
  77              	.L5:
  92:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN MemoryManagement_IRQn 0 */
  93:Src/stm32f1xx_it.c **** 
  94:Src/stm32f1xx_it.c ****   /* USER CODE END MemoryManagement_IRQn 0 */
  95:Src/stm32f1xx_it.c ****   while(1) {
  78              		.loc 1 95 3 discriminator 1 view .LVU7
  96:Src/stm32f1xx_it.c ****   }
  79              		.loc 1 96 3 discriminator 1 view .LVU8
ARM GAS  /var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//ccjDr6p3.s 			page 4


  95:Src/stm32f1xx_it.c ****   }
  80              		.loc 1 95 8 discriminator 1 view .LVU9
  81 0000 FEE7     		b	.L5
  82              		.cfi_endproc
  83              	.LFE68:
  85              		.section	.text.BusFault_Handler,"ax",%progbits
  86              		.align	1
  87              		.global	BusFault_Handler
  88              		.syntax unified
  89              		.thumb
  90              		.thumb_func
  91              		.fpu softvfp
  93              	BusFault_Handler:
  94              	.LFB69:
  97:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN MemoryManagement_IRQn 1 */
  98:Src/stm32f1xx_it.c **** 
  99:Src/stm32f1xx_it.c ****   /* USER CODE END MemoryManagement_IRQn 1 */
 100:Src/stm32f1xx_it.c **** }
 101:Src/stm32f1xx_it.c **** 
 102:Src/stm32f1xx_it.c **** /**
 103:Src/stm32f1xx_it.c **** * @brief This function handles Prefetch fault, memory access fault.
 104:Src/stm32f1xx_it.c **** */
 105:Src/stm32f1xx_it.c **** void BusFault_Handler(void) {
  95              		.loc 1 105 29 view -0
  96              		.cfi_startproc
  97              		@ Volatile: function does not return.
  98              		@ args = 0, pretend = 0, frame = 0
  99              		@ frame_needed = 0, uses_anonymous_args = 0
 100              		@ link register save eliminated.
 101              	.L7:
 106:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN BusFault_IRQn 0 */
 107:Src/stm32f1xx_it.c **** 
 108:Src/stm32f1xx_it.c ****   /* USER CODE END BusFault_IRQn 0 */
 109:Src/stm32f1xx_it.c ****   while(1) {
 102              		.loc 1 109 3 discriminator 1 view .LVU11
 110:Src/stm32f1xx_it.c ****   }
 103              		.loc 1 110 3 discriminator 1 view .LVU12
 109:Src/stm32f1xx_it.c ****   }
 104              		.loc 1 109 8 discriminator 1 view .LVU13
 105 0000 FEE7     		b	.L7
 106              		.cfi_endproc
 107              	.LFE69:
 109              		.section	.text.UsageFault_Handler,"ax",%progbits
 110              		.align	1
 111              		.global	UsageFault_Handler
 112              		.syntax unified
 113              		.thumb
 114              		.thumb_func
 115              		.fpu softvfp
 117              	UsageFault_Handler:
 118              	.LFB70:
 111:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN BusFault_IRQn 1 */
 112:Src/stm32f1xx_it.c **** 
 113:Src/stm32f1xx_it.c ****   /* USER CODE END BusFault_IRQn 1 */
 114:Src/stm32f1xx_it.c **** }
 115:Src/stm32f1xx_it.c **** 
 116:Src/stm32f1xx_it.c **** /**
ARM GAS  /var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//ccjDr6p3.s 			page 5


 117:Src/stm32f1xx_it.c **** * @brief This function handles Undefined instruction or illegal state.
 118:Src/stm32f1xx_it.c **** */
 119:Src/stm32f1xx_it.c **** void UsageFault_Handler(void) {
 119              		.loc 1 119 31 view -0
 120              		.cfi_startproc
 121              		@ Volatile: function does not return.
 122              		@ args = 0, pretend = 0, frame = 0
 123              		@ frame_needed = 0, uses_anonymous_args = 0
 124              		@ link register save eliminated.
 125              	.L9:
 120:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN UsageFault_IRQn 0 */
 121:Src/stm32f1xx_it.c **** 
 122:Src/stm32f1xx_it.c ****   /* USER CODE END UsageFault_IRQn 0 */
 123:Src/stm32f1xx_it.c ****   while(1) {
 126              		.loc 1 123 3 discriminator 1 view .LVU15
 124:Src/stm32f1xx_it.c ****   }
 127              		.loc 1 124 3 discriminator 1 view .LVU16
 123:Src/stm32f1xx_it.c ****   }
 128              		.loc 1 123 8 discriminator 1 view .LVU17
 129 0000 FEE7     		b	.L9
 130              		.cfi_endproc
 131              	.LFE70:
 133              		.section	.text.SVC_Handler,"ax",%progbits
 134              		.align	1
 135              		.global	SVC_Handler
 136              		.syntax unified
 137              		.thumb
 138              		.thumb_func
 139              		.fpu softvfp
 141              	SVC_Handler:
 142              	.LFB71:
 125:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN UsageFault_IRQn 1 */
 126:Src/stm32f1xx_it.c **** 
 127:Src/stm32f1xx_it.c ****   /* USER CODE END UsageFault_IRQn 1 */
 128:Src/stm32f1xx_it.c **** }
 129:Src/stm32f1xx_it.c **** 
 130:Src/stm32f1xx_it.c **** /**
 131:Src/stm32f1xx_it.c **** * @brief This function handles System service call via SWI instruction.
 132:Src/stm32f1xx_it.c **** */
 133:Src/stm32f1xx_it.c **** void SVC_Handler(void) {
 143              		.loc 1 133 24 view -0
 144              		.cfi_startproc
 145              		@ args = 0, pretend = 0, frame = 0
 146              		@ frame_needed = 0, uses_anonymous_args = 0
 147              		@ link register save eliminated.
 134:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 0 */
 135:Src/stm32f1xx_it.c **** 
 136:Src/stm32f1xx_it.c ****   /* USER CODE END SVCall_IRQn 0 */
 137:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 1 */
 138:Src/stm32f1xx_it.c **** 
 139:Src/stm32f1xx_it.c ****   /* USER CODE END SVCall_IRQn 1 */
 140:Src/stm32f1xx_it.c **** }
 148              		.loc 1 140 1 view .LVU19
 149 0000 7047     		bx	lr
 150              		.cfi_endproc
 151              	.LFE71:
 153              		.section	.text.DebugMon_Handler,"ax",%progbits
ARM GAS  /var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//ccjDr6p3.s 			page 6


 154              		.align	1
 155              		.global	DebugMon_Handler
 156              		.syntax unified
 157              		.thumb
 158              		.thumb_func
 159              		.fpu softvfp
 161              	DebugMon_Handler:
 162              	.LFB72:
 141:Src/stm32f1xx_it.c **** 
 142:Src/stm32f1xx_it.c **** /**
 143:Src/stm32f1xx_it.c **** * @brief This function handles Debug monitor.
 144:Src/stm32f1xx_it.c **** */
 145:Src/stm32f1xx_it.c **** void DebugMon_Handler(void) {
 163              		.loc 1 145 29 view -0
 164              		.cfi_startproc
 165              		@ args = 0, pretend = 0, frame = 0
 166              		@ frame_needed = 0, uses_anonymous_args = 0
 167              		@ link register save eliminated.
 146:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 0 */
 147:Src/stm32f1xx_it.c **** 
 148:Src/stm32f1xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 0 */
 149:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 1 */
 150:Src/stm32f1xx_it.c **** 
 151:Src/stm32f1xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 1 */
 152:Src/stm32f1xx_it.c **** }
 168              		.loc 1 152 1 view .LVU21
 169 0000 7047     		bx	lr
 170              		.cfi_endproc
 171              	.LFE72:
 173              		.section	.text.PendSV_Handler,"ax",%progbits
 174              		.align	1
 175              		.global	PendSV_Handler
 176              		.syntax unified
 177              		.thumb
 178              		.thumb_func
 179              		.fpu softvfp
 181              	PendSV_Handler:
 182              	.LFB73:
 153:Src/stm32f1xx_it.c **** 
 154:Src/stm32f1xx_it.c **** /**
 155:Src/stm32f1xx_it.c **** * @brief This function handles Pendable request for system service.
 156:Src/stm32f1xx_it.c **** */
 157:Src/stm32f1xx_it.c **** void PendSV_Handler(void) {
 183              		.loc 1 157 27 view -0
 184              		.cfi_startproc
 185              		@ args = 0, pretend = 0, frame = 0
 186              		@ frame_needed = 0, uses_anonymous_args = 0
 187              		@ link register save eliminated.
 158:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 0 */
 159:Src/stm32f1xx_it.c **** 
 160:Src/stm32f1xx_it.c ****   /* USER CODE END PendSV_IRQn 0 */
 161:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 1 */
 162:Src/stm32f1xx_it.c **** 
 163:Src/stm32f1xx_it.c ****   /* USER CODE END PendSV_IRQn 1 */
 164:Src/stm32f1xx_it.c **** }
 188              		.loc 1 164 1 view .LVU23
 189 0000 7047     		bx	lr
ARM GAS  /var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//ccjDr6p3.s 			page 7


 190              		.cfi_endproc
 191              	.LFE73:
 193              		.section	.text.SysTick_Handler,"ax",%progbits
 194              		.align	1
 195              		.global	SysTick_Handler
 196              		.syntax unified
 197              		.thumb
 198              		.thumb_func
 199              		.fpu softvfp
 201              	SysTick_Handler:
 202              	.LFB74:
 165:Src/stm32f1xx_it.c **** 
 166:Src/stm32f1xx_it.c **** /**
 167:Src/stm32f1xx_it.c **** * @brief This function handles System tick timer.
 168:Src/stm32f1xx_it.c **** */
 169:Src/stm32f1xx_it.c **** #if defined(CONTROL_PPM_LEFT) || defined(CONTROL_PPM_RIGHT)
 170:Src/stm32f1xx_it.c **** void PPM_SysTick_Callback(void);
 171:Src/stm32f1xx_it.c **** #endif
 172:Src/stm32f1xx_it.c **** 
 173:Src/stm32f1xx_it.c **** #if defined(CONTROL_PWM_LEFT) || defined(CONTROL_PWM_RIGHT)
 174:Src/stm32f1xx_it.c **** void PWM_SysTick_Callback(void);
 175:Src/stm32f1xx_it.c **** #endif
 176:Src/stm32f1xx_it.c **** 
 177:Src/stm32f1xx_it.c **** void SysTick_Handler(void) {
 203              		.loc 1 177 28 view -0
 204              		.cfi_startproc
 205              		@ args = 0, pretend = 0, frame = 0
 206              		@ frame_needed = 0, uses_anonymous_args = 0
 207 0000 08B5     		push	{r3, lr}
 208              	.LCFI0:
 209              		.cfi_def_cfa_offset 8
 210              		.cfi_offset 3, -8
 211              		.cfi_offset 14, -4
 178:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 0 */
 179:Src/stm32f1xx_it.c **** 
 180:Src/stm32f1xx_it.c ****   /* USER CODE END SysTick_IRQn 0 */
 181:Src/stm32f1xx_it.c ****   HAL_IncTick();
 212              		.loc 1 181 3 view .LVU25
 213 0002 FFF7FEFF 		bl	HAL_IncTick
 214              	.LVL0:
 182:Src/stm32f1xx_it.c ****   HAL_SYSTICK_IRQHandler();
 215              		.loc 1 182 3 view .LVU26
 216 0006 FFF7FEFF 		bl	HAL_SYSTICK_IRQHandler
 217              	.LVL1:
 183:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 1 */
 184:Src/stm32f1xx_it.c **** #if defined(CONTROL_PPM_LEFT) || defined(CONTROL_PPM_RIGHT)
 185:Src/stm32f1xx_it.c ****   PPM_SysTick_Callback();
 186:Src/stm32f1xx_it.c **** #endif
 187:Src/stm32f1xx_it.c **** 
 188:Src/stm32f1xx_it.c **** #if defined(CONTROL_PWM_LEFT) || defined(CONTROL_PWM_RIGHT)
 189:Src/stm32f1xx_it.c ****   PWM_SysTick_Callback();
 190:Src/stm32f1xx_it.c **** #endif
 191:Src/stm32f1xx_it.c ****   /* USER CODE END SysTick_IRQn 1 */
 192:Src/stm32f1xx_it.c **** }
 218              		.loc 1 192 1 is_stmt 0 view .LVU27
 219 000a 08BD     		pop	{r3, pc}
 220              		.cfi_endproc
ARM GAS  /var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//ccjDr6p3.s 			page 8


 221              	.LFE74:
 223              		.section	.text.DMA1_Channel2_IRQHandler,"ax",%progbits
 224              		.align	1
 225              		.global	DMA1_Channel2_IRQHandler
 226              		.syntax unified
 227              		.thumb
 228              		.thumb_func
 229              		.fpu softvfp
 231              	DMA1_Channel2_IRQHandler:
 232              	.LFB75:
 193:Src/stm32f1xx_it.c **** 
 194:Src/stm32f1xx_it.c **** #ifdef CONTROL_NUNCHUK
 195:Src/stm32f1xx_it.c **** extern I2C_HandleTypeDef hi2c2;
 196:Src/stm32f1xx_it.c **** void I2C1_EV_IRQHandler(void)
 197:Src/stm32f1xx_it.c **** {
 198:Src/stm32f1xx_it.c ****   HAL_I2C_EV_IRQHandler(&hi2c2);
 199:Src/stm32f1xx_it.c **** }
 200:Src/stm32f1xx_it.c **** 
 201:Src/stm32f1xx_it.c **** void I2C1_ER_IRQHandler(void)
 202:Src/stm32f1xx_it.c **** {
 203:Src/stm32f1xx_it.c ****   HAL_I2C_ER_IRQHandler(&hi2c2);
 204:Src/stm32f1xx_it.c **** }
 205:Src/stm32f1xx_it.c **** 
 206:Src/stm32f1xx_it.c **** /**
 207:Src/stm32f1xx_it.c **** * @brief This function handles DMA1 channel4 global interrupt.
 208:Src/stm32f1xx_it.c **** */
 209:Src/stm32f1xx_it.c **** void DMA1_Channel4_IRQHandler(void)
 210:Src/stm32f1xx_it.c **** {
 211:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */
 212:Src/stm32f1xx_it.c **** 
 213:Src/stm32f1xx_it.c ****   /* USER CODE END DMA1_Channel4_IRQn 0 */
 214:Src/stm32f1xx_it.c ****   HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 215:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */
 216:Src/stm32f1xx_it.c **** 
 217:Src/stm32f1xx_it.c ****   /* USER CODE END DMA1_Channel4_IRQn 1 */
 218:Src/stm32f1xx_it.c **** }
 219:Src/stm32f1xx_it.c **** 
 220:Src/stm32f1xx_it.c **** /**
 221:Src/stm32f1xx_it.c **** * @brief This function handles DMA1 channel5 global interrupt.
 222:Src/stm32f1xx_it.c **** */
 223:Src/stm32f1xx_it.c **** void DMA1_Channel5_IRQHandler(void)
 224:Src/stm32f1xx_it.c **** {
 225:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */
 226:Src/stm32f1xx_it.c **** 
 227:Src/stm32f1xx_it.c ****   /* USER CODE END DMA1_Channel5_IRQn 0 */
 228:Src/stm32f1xx_it.c ****   HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 229:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */
 230:Src/stm32f1xx_it.c **** 
 231:Src/stm32f1xx_it.c ****   /* USER CODE END DMA1_Channel5_IRQn 1 */
 232:Src/stm32f1xx_it.c **** }
 233:Src/stm32f1xx_it.c **** #endif
 234:Src/stm32f1xx_it.c **** 
 235:Src/stm32f1xx_it.c **** #ifdef CONTROL_PPM_LEFT
 236:Src/stm32f1xx_it.c **** void EXTI3_IRQHandler(void)
 237:Src/stm32f1xx_it.c **** {
 238:Src/stm32f1xx_it.c ****   __HAL_GPIO_EXTI_CLEAR_IT(PPM_PIN);
 239:Src/stm32f1xx_it.c ****   PPM_ISR_Callback();    
ARM GAS  /var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//ccjDr6p3.s 			page 9


 240:Src/stm32f1xx_it.c **** }
 241:Src/stm32f1xx_it.c **** #endif
 242:Src/stm32f1xx_it.c **** #ifdef CONTROL_PPM_RIGHT
 243:Src/stm32f1xx_it.c **** void EXTI15_10_IRQHandler(void)
 244:Src/stm32f1xx_it.c **** {
 245:Src/stm32f1xx_it.c ****   if(__HAL_GPIO_EXTI_GET_IT(PPM_PIN) != RESET) {
 246:Src/stm32f1xx_it.c ****     __HAL_GPIO_EXTI_CLEAR_IT(PPM_PIN);
 247:Src/stm32f1xx_it.c ****     PPM_ISR_Callback();
 248:Src/stm32f1xx_it.c ****   }
 249:Src/stm32f1xx_it.c **** }
 250:Src/stm32f1xx_it.c **** #endif
 251:Src/stm32f1xx_it.c **** 
 252:Src/stm32f1xx_it.c **** #ifdef CONTROL_PWM_LEFT
 253:Src/stm32f1xx_it.c **** void EXTI2_IRQHandler(void)
 254:Src/stm32f1xx_it.c **** {    
 255:Src/stm32f1xx_it.c ****   __HAL_GPIO_EXTI_CLEAR_IT(PWM_PIN_CH1);
 256:Src/stm32f1xx_it.c ****   PWM_ISR_CH1_Callback();
 257:Src/stm32f1xx_it.c **** }
 258:Src/stm32f1xx_it.c **** 
 259:Src/stm32f1xx_it.c **** void EXTI3_IRQHandler(void)
 260:Src/stm32f1xx_it.c **** {
 261:Src/stm32f1xx_it.c ****   __HAL_GPIO_EXTI_CLEAR_IT(PWM_PIN_CH2);
 262:Src/stm32f1xx_it.c ****   PWM_ISR_CH2_Callback();    
 263:Src/stm32f1xx_it.c **** }
 264:Src/stm32f1xx_it.c **** #endif
 265:Src/stm32f1xx_it.c **** #ifdef CONTROL_PWM_RIGHT
 266:Src/stm32f1xx_it.c **** void EXTI15_10_IRQHandler(void)
 267:Src/stm32f1xx_it.c **** {
 268:Src/stm32f1xx_it.c ****   if(__HAL_GPIO_EXTI_GET_IT(PWM_PIN_CH1) != RESET) {
 269:Src/stm32f1xx_it.c ****     __HAL_GPIO_EXTI_CLEAR_IT(PWM_PIN_CH1);
 270:Src/stm32f1xx_it.c ****     PWM_ISR_CH1_Callback();
 271:Src/stm32f1xx_it.c ****   }
 272:Src/stm32f1xx_it.c ****   if(__HAL_GPIO_EXTI_GET_IT(PWM_PIN_CH2) != RESET) {
 273:Src/stm32f1xx_it.c ****     __HAL_GPIO_EXTI_CLEAR_IT(PWM_PIN_CH2);
 274:Src/stm32f1xx_it.c ****     PWM_ISR_CH2_Callback();
 275:Src/stm32f1xx_it.c ****   }
 276:Src/stm32f1xx_it.c **** }
 277:Src/stm32f1xx_it.c **** #endif
 278:Src/stm32f1xx_it.c **** 
 279:Src/stm32f1xx_it.c **** #if defined(DEBUG_SERIAL_USART2) || defined(CONTROL_SERIAL_USART2) || defined(FEEDBACK_SERIAL_USART
 280:Src/stm32f1xx_it.c **** void DMA1_Channel6_IRQHandler(void)
 281:Src/stm32f1xx_it.c **** {
 282:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */
 283:Src/stm32f1xx_it.c **** 
 284:Src/stm32f1xx_it.c ****   /* USER CODE END DMA1_Channel4_IRQn 0 */
 285:Src/stm32f1xx_it.c ****   HAL_DMA_IRQHandler(&hdma_usart2_rx);
 286:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */
 287:Src/stm32f1xx_it.c **** 
 288:Src/stm32f1xx_it.c ****   /* USER CODE END DMA1_Channel4_IRQn 1 */
 289:Src/stm32f1xx_it.c **** }
 290:Src/stm32f1xx_it.c **** 
 291:Src/stm32f1xx_it.c **** /**
 292:Src/stm32f1xx_it.c **** * @brief This function handles DMA1 channel5 global interrupt.
 293:Src/stm32f1xx_it.c **** */
 294:Src/stm32f1xx_it.c **** void DMA1_Channel7_IRQHandler(void)
 295:Src/stm32f1xx_it.c **** {
 296:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */
ARM GAS  /var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//ccjDr6p3.s 			page 10


 297:Src/stm32f1xx_it.c **** 
 298:Src/stm32f1xx_it.c ****   /* USER CODE END DMA1_Channel5_IRQn 0 */
 299:Src/stm32f1xx_it.c ****   HAL_DMA_IRQHandler(&hdma_usart2_tx);
 300:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */
 301:Src/stm32f1xx_it.c **** 
 302:Src/stm32f1xx_it.c ****   /* USER CODE END DMA1_Channel5_IRQn 1 */
 303:Src/stm32f1xx_it.c **** }
 304:Src/stm32f1xx_it.c **** #endif
 305:Src/stm32f1xx_it.c **** 
 306:Src/stm32f1xx_it.c **** #if defined(DEBUG_SERIAL_USART3) || defined(CONTROL_SERIAL_USART3) || defined(FEEDBACK_SERIAL_USART
 307:Src/stm32f1xx_it.c **** /**
 308:Src/stm32f1xx_it.c ****   * @brief This function handles DMA1 channel2 global interrupt.
 309:Src/stm32f1xx_it.c ****   */
 310:Src/stm32f1xx_it.c **** void DMA1_Channel2_IRQHandler(void)
 311:Src/stm32f1xx_it.c **** {
 233              		.loc 1 311 1 is_stmt 1 view -0
 234              		.cfi_startproc
 235              		@ args = 0, pretend = 0, frame = 0
 236              		@ frame_needed = 0, uses_anonymous_args = 0
 237 0000 08B5     		push	{r3, lr}
 238              	.LCFI1:
 239              		.cfi_def_cfa_offset 8
 240              		.cfi_offset 3, -8
 241              		.cfi_offset 14, -4
 312:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */
 313:Src/stm32f1xx_it.c **** 
 314:Src/stm32f1xx_it.c ****   /* USER CODE END DMA1_Channel2_IRQn 0 */
 315:Src/stm32f1xx_it.c ****   HAL_DMA_IRQHandler(&hdma_usart3_tx);
 242              		.loc 1 315 3 view .LVU29
 243 0002 0248     		ldr	r0, .L17
 244 0004 FFF7FEFF 		bl	HAL_DMA_IRQHandler
 245              	.LVL2:
 316:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */
 317:Src/stm32f1xx_it.c **** 
 318:Src/stm32f1xx_it.c ****   /* USER CODE END DMA1_Channel2_IRQn 1 */
 319:Src/stm32f1xx_it.c **** }
 246              		.loc 1 319 1 is_stmt 0 view .LVU30
 247 0008 08BD     		pop	{r3, pc}
 248              	.L18:
 249 000a 00BF     		.align	2
 250              	.L17:
 251 000c 00000000 		.word	hdma_usart3_tx
 252              		.cfi_endproc
 253              	.LFE75:
 255              		.section	.text.DMA1_Channel3_IRQHandler,"ax",%progbits
 256              		.align	1
 257              		.global	DMA1_Channel3_IRQHandler
 258              		.syntax unified
 259              		.thumb
 260              		.thumb_func
 261              		.fpu softvfp
 263              	DMA1_Channel3_IRQHandler:
 264              	.LFB76:
 320:Src/stm32f1xx_it.c **** 
 321:Src/stm32f1xx_it.c **** /**
 322:Src/stm32f1xx_it.c ****   * @brief This function handles DMA1 channel3 global interrupt.
 323:Src/stm32f1xx_it.c ****   */
ARM GAS  /var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//ccjDr6p3.s 			page 11


 324:Src/stm32f1xx_it.c **** void DMA1_Channel3_IRQHandler(void)
 325:Src/stm32f1xx_it.c **** {
 265              		.loc 1 325 1 is_stmt 1 view -0
 266              		.cfi_startproc
 267              		@ args = 0, pretend = 0, frame = 0
 268              		@ frame_needed = 0, uses_anonymous_args = 0
 269 0000 08B5     		push	{r3, lr}
 270              	.LCFI2:
 271              		.cfi_def_cfa_offset 8
 272              		.cfi_offset 3, -8
 273              		.cfi_offset 14, -4
 326:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */
 327:Src/stm32f1xx_it.c **** 
 328:Src/stm32f1xx_it.c ****   /* USER CODE END DMA1_Channel3_IRQn 0 */
 329:Src/stm32f1xx_it.c ****   HAL_DMA_IRQHandler(&hdma_usart3_rx);
 274              		.loc 1 329 3 view .LVU32
 275 0002 0248     		ldr	r0, .L21
 276 0004 FFF7FEFF 		bl	HAL_DMA_IRQHandler
 277              	.LVL3:
 330:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */
 331:Src/stm32f1xx_it.c **** 
 332:Src/stm32f1xx_it.c ****   /* USER CODE END DMA1_Channel3_IRQn 1 */
 333:Src/stm32f1xx_it.c **** }
 278              		.loc 1 333 1 is_stmt 0 view .LVU33
 279 0008 08BD     		pop	{r3, pc}
 280              	.L22:
 281 000a 00BF     		.align	2
 282              	.L21:
 283 000c 00000000 		.word	hdma_usart3_rx
 284              		.cfi_endproc
 285              	.LFE76:
 287              		.section	.text.USART3_IRQHandler,"ax",%progbits
 288              		.align	1
 289              		.global	USART3_IRQHandler
 290              		.syntax unified
 291              		.thumb
 292              		.thumb_func
 293              		.fpu softvfp
 295              	USART3_IRQHandler:
 296              	.LFB77:
 334:Src/stm32f1xx_it.c **** #endif
 335:Src/stm32f1xx_it.c **** 
 336:Src/stm32f1xx_it.c **** #if defined(DEBUG_SERIAL_USART2) || defined(CONTROL_SERIAL_USART2) || defined(FEEDBACK_SERIAL_USART
 337:Src/stm32f1xx_it.c **** /**
 338:Src/stm32f1xx_it.c ****   * @brief This function handles USART2 global interrupt.
 339:Src/stm32f1xx_it.c ****   */
 340:Src/stm32f1xx_it.c **** void USART2_IRQHandler(void)
 341:Src/stm32f1xx_it.c **** {
 342:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN USART2_IRQn 0 */
 343:Src/stm32f1xx_it.c **** 
 344:Src/stm32f1xx_it.c ****   /* USER CODE END USART2_IRQn 0 */
 345:Src/stm32f1xx_it.c ****   HAL_UART_IRQHandler(&huart2);
 346:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN USART2_IRQn 1 */
 347:Src/stm32f1xx_it.c ****   if(RESET != __HAL_UART_GET_IT_SOURCE(&huart2, UART_IT_IDLE)) {  // Check for IDLE line interrupt
 348:Src/stm32f1xx_it.c ****       __HAL_UART_CLEAR_IDLEFLAG(&huart2);                         // Clear IDLE line flag (otherwis
 349:Src/stm32f1xx_it.c ****       usart2_rx_check();                                          // Check for data to process
 350:Src/stm32f1xx_it.c ****   }
ARM GAS  /var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//ccjDr6p3.s 			page 12


 351:Src/stm32f1xx_it.c ****   /* USER CODE END USART2_IRQn 1 */
 352:Src/stm32f1xx_it.c **** }
 353:Src/stm32f1xx_it.c **** #endif
 354:Src/stm32f1xx_it.c **** 
 355:Src/stm32f1xx_it.c **** #if defined(DEBUG_SERIAL_USART3) || defined(CONTROL_SERIAL_USART3) || defined(FEEDBACK_SERIAL_USART
 356:Src/stm32f1xx_it.c **** /**
 357:Src/stm32f1xx_it.c ****   * @brief This function handles USART3 global interrupt.
 358:Src/stm32f1xx_it.c ****   */
 359:Src/stm32f1xx_it.c **** void USART3_IRQHandler(void)
 360:Src/stm32f1xx_it.c **** {
 297              		.loc 1 360 1 is_stmt 1 view -0
 298              		.cfi_startproc
 299              		@ args = 0, pretend = 0, frame = 8
 300              		@ frame_needed = 0, uses_anonymous_args = 0
 301 0000 10B5     		push	{r4, lr}
 302              	.LCFI3:
 303              		.cfi_def_cfa_offset 8
 304              		.cfi_offset 4, -8
 305              		.cfi_offset 14, -4
 306 0002 82B0     		sub	sp, sp, #8
 307              	.LCFI4:
 308              		.cfi_def_cfa_offset 16
 361:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN USART2_IRQn 0 */
 362:Src/stm32f1xx_it.c **** 
 363:Src/stm32f1xx_it.c ****   /* USER CODE END USART2_IRQn 0 */
 364:Src/stm32f1xx_it.c ****   HAL_UART_IRQHandler(&huart3);
 309              		.loc 1 364 3 view .LVU35
 310 0004 0A4C     		ldr	r4, .L27
 311 0006 2046     		mov	r0, r4
 312 0008 FFF7FEFF 		bl	HAL_UART_IRQHandler
 313              	.LVL4:
 365:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN USART2_IRQn 1 */
 366:Src/stm32f1xx_it.c ****   if(RESET != __HAL_UART_GET_IT_SOURCE(&huart3, UART_IT_IDLE)) {  // Check for IDLE line interrupt 
 314              		.loc 1 366 3 view .LVU36
 315              		.loc 1 366 15 is_stmt 0 view .LVU37
 316 000c 2368     		ldr	r3, [r4]
 317 000e DA68     		ldr	r2, [r3, #12]
 318              		.loc 1 366 5 view .LVU38
 319 0010 12F0100F 		tst	r2, #16
 320 0014 01D1     		bne	.L26
 321              	.L23:
 367:Src/stm32f1xx_it.c ****       __HAL_UART_CLEAR_IDLEFLAG(&huart3);                         // Clear IDLE line flag (otherwis
 368:Src/stm32f1xx_it.c ****       usart3_rx_check();                                          // Check for data to process
 369:Src/stm32f1xx_it.c ****   }
 370:Src/stm32f1xx_it.c ****   /* USER CODE END USART2_IRQn 1 */
 371:Src/stm32f1xx_it.c **** }
 322              		.loc 1 371 1 view .LVU39
 323 0016 02B0     		add	sp, sp, #8
 324              	.LCFI5:
 325              		.cfi_remember_state
 326              		.cfi_def_cfa_offset 8
 327              		@ sp needed
 328 0018 10BD     		pop	{r4, pc}
 329              	.L26:
 330              	.LCFI6:
 331              		.cfi_restore_state
 367:Src/stm32f1xx_it.c ****       __HAL_UART_CLEAR_IDLEFLAG(&huart3);                         // Clear IDLE line flag (otherwis
ARM GAS  /var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//ccjDr6p3.s 			page 13


 332              		.loc 1 367 7 is_stmt 1 view .LVU40
 333              	.LBB2:
 367:Src/stm32f1xx_it.c ****       __HAL_UART_CLEAR_IDLEFLAG(&huart3);                         // Clear IDLE line flag (otherwis
 334              		.loc 1 367 7 view .LVU41
 335 001a 0022     		movs	r2, #0
 336 001c 0192     		str	r2, [sp, #4]
 367:Src/stm32f1xx_it.c ****       __HAL_UART_CLEAR_IDLEFLAG(&huart3);                         // Clear IDLE line flag (otherwis
 337              		.loc 1 367 7 view .LVU42
 338 001e 1A68     		ldr	r2, [r3]
 339 0020 0192     		str	r2, [sp, #4]
 367:Src/stm32f1xx_it.c ****       __HAL_UART_CLEAR_IDLEFLAG(&huart3);                         // Clear IDLE line flag (otherwis
 340              		.loc 1 367 7 view .LVU43
 341 0022 5B68     		ldr	r3, [r3, #4]
 342 0024 0193     		str	r3, [sp, #4]
 367:Src/stm32f1xx_it.c ****       __HAL_UART_CLEAR_IDLEFLAG(&huart3);                         // Clear IDLE line flag (otherwis
 343              		.loc 1 367 7 view .LVU44
 344 0026 019B     		ldr	r3, [sp, #4]
 345              	.LBE2:
 367:Src/stm32f1xx_it.c ****       __HAL_UART_CLEAR_IDLEFLAG(&huart3);                         // Clear IDLE line flag (otherwis
 346              		.loc 1 367 7 view .LVU45
 368:Src/stm32f1xx_it.c ****   }
 347              		.loc 1 368 7 view .LVU46
 348 0028 FFF7FEFF 		bl	usart3_rx_check
 349              	.LVL5:
 350              		.loc 1 371 1 is_stmt 0 view .LVU47
 351 002c F3E7     		b	.L23
 352              	.L28:
 353 002e 00BF     		.align	2
 354              	.L27:
 355 0030 00000000 		.word	huart3
 356              		.cfi_endproc
 357              	.LFE77:
 359              		.text
 360              	.Letext0:
 361              		.file 2 "/usr/local/Caskroom/gcc-arm-embedded/10-2020-q4-major/gcc-arm-none-eabi-10-2020-q4-major/
 362              		.file 3 "/usr/local/Caskroom/gcc-arm-embedded/10-2020-q4-major/gcc-arm-none-eabi-10-2020-q4-major/
 363              		.file 4 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xe.h"
 364              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 365              		.file 6 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 366              		.file 7 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 367              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_uart.h"
 368              		.file 9 "Inc/util.h"
 369              		.file 10 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 370              		.file 11 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_cortex.h"
ARM GAS  /var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//ccjDr6p3.s 			page 14


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f1xx_it.c
/var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//ccjDr6p3.s:16     .text.NMI_Handler:0000000000000000 $t
/var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//ccjDr6p3.s:24     .text.NMI_Handler:0000000000000000 NMI_Handler
/var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//ccjDr6p3.s:38     .text.HardFault_Handler:0000000000000000 $t
/var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//ccjDr6p3.s:45     .text.HardFault_Handler:0000000000000000 HardFault_Handler
/var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//ccjDr6p3.s:62     .text.MemManage_Handler:0000000000000000 $t
/var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//ccjDr6p3.s:69     .text.MemManage_Handler:0000000000000000 MemManage_Handler
/var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//ccjDr6p3.s:86     .text.BusFault_Handler:0000000000000000 $t
/var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//ccjDr6p3.s:93     .text.BusFault_Handler:0000000000000000 BusFault_Handler
/var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//ccjDr6p3.s:110    .text.UsageFault_Handler:0000000000000000 $t
/var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//ccjDr6p3.s:117    .text.UsageFault_Handler:0000000000000000 UsageFault_Handler
/var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//ccjDr6p3.s:134    .text.SVC_Handler:0000000000000000 $t
/var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//ccjDr6p3.s:141    .text.SVC_Handler:0000000000000000 SVC_Handler
/var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//ccjDr6p3.s:154    .text.DebugMon_Handler:0000000000000000 $t
/var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//ccjDr6p3.s:161    .text.DebugMon_Handler:0000000000000000 DebugMon_Handler
/var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//ccjDr6p3.s:174    .text.PendSV_Handler:0000000000000000 $t
/var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//ccjDr6p3.s:181    .text.PendSV_Handler:0000000000000000 PendSV_Handler
/var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//ccjDr6p3.s:194    .text.SysTick_Handler:0000000000000000 $t
/var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//ccjDr6p3.s:201    .text.SysTick_Handler:0000000000000000 SysTick_Handler
/var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//ccjDr6p3.s:224    .text.DMA1_Channel2_IRQHandler:0000000000000000 $t
/var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//ccjDr6p3.s:231    .text.DMA1_Channel2_IRQHandler:0000000000000000 DMA1_Channel2_IRQHandler
/var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//ccjDr6p3.s:251    .text.DMA1_Channel2_IRQHandler:000000000000000c $d
/var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//ccjDr6p3.s:256    .text.DMA1_Channel3_IRQHandler:0000000000000000 $t
/var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//ccjDr6p3.s:263    .text.DMA1_Channel3_IRQHandler:0000000000000000 DMA1_Channel3_IRQHandler
/var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//ccjDr6p3.s:283    .text.DMA1_Channel3_IRQHandler:000000000000000c $d
/var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//ccjDr6p3.s:288    .text.USART3_IRQHandler:0000000000000000 $t
/var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//ccjDr6p3.s:295    .text.USART3_IRQHandler:0000000000000000 USART3_IRQHandler
/var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//ccjDr6p3.s:355    .text.USART3_IRQHandler:0000000000000030 $d

UNDEFINED SYMBOLS
HAL_IncTick
HAL_SYSTICK_IRQHandler
HAL_DMA_IRQHandler
hdma_usart3_tx
hdma_usart3_rx
HAL_UART_IRQHandler
usart3_rx_check
huart3
