ARM GAS  /var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//cco5HlIp.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.SystemClock_Config,"ax",%progbits
  16              		.align	1
  17              		.global	SystemClock_Config
  18              		.arch armv7-m
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu softvfp
  24              	SystemClock_Config:
  25              	.LFB67:
  26              		.file 1 "Src/main.c"
   1:Src/main.c    **** /*
   2:Src/main.c    **** * This file is part of the hoverboard-firmware-hack project.
   3:Src/main.c    **** *
   4:Src/main.c    **** * Copyright (C) 2017-2018 Rene Hopf <renehopf@mac.com>
   5:Src/main.c    **** * Copyright (C) 2017-2018 Nico Stute <crinq@crinq.de>
   6:Src/main.c    **** * Copyright (C) 2017-2018 Niklas Fauth <niklas.fauth@kit.fail>
   7:Src/main.c    **** * Copyright (C) 2019-2020 Emanuel FERU <aerdronix@gmail.com>
   8:Src/main.c    **** *
   9:Src/main.c    **** * This program is free software: you can redistribute it and/or modify
  10:Src/main.c    **** * it under the terms of the GNU General Public License as published by
  11:Src/main.c    **** * the Free Software Foundation, either version 3 of the License, or
  12:Src/main.c    **** * (at your option) any later version.
  13:Src/main.c    **** *
  14:Src/main.c    **** * This program is distributed in the hope that it will be useful,
  15:Src/main.c    **** * but WITHOUT ANY WARRANTY; without even the implied warranty of
  16:Src/main.c    **** * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  17:Src/main.c    **** * GNU General Public License for more details.
  18:Src/main.c    **** *
  19:Src/main.c    **** * You should have received a copy of the GNU General Public License
  20:Src/main.c    **** * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  21:Src/main.c    **** */
  22:Src/main.c    **** 
  23:Src/main.c    **** #include <stdio.h>
  24:Src/main.c    **** #include <stdlib.h> // for abs()
  25:Src/main.c    **** #include "stm32f1xx_hal.h"
  26:Src/main.c    **** #include "defines.h"
  27:Src/main.c    **** #include "setup.h"
  28:Src/main.c    **** #include "config.h"
  29:Src/main.c    **** #include "util.h"
  30:Src/main.c    **** #include "BLDC_controller.h"      /* BLDC's header file */
  31:Src/main.c    **** #include "rtwtypes.h"
  32:Src/main.c    **** #include "comms.h"
ARM GAS  /var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//cco5HlIp.s 			page 2


  33:Src/main.c    **** 
  34:Src/main.c    **** #if defined(DEBUG_I2C_LCD) || defined(SUPPORT_LCD)
  35:Src/main.c    **** #include "hd44780.h"
  36:Src/main.c    **** #endif
  37:Src/main.c    **** 
  38:Src/main.c    **** void SystemClock_Config(void);
  39:Src/main.c    **** 
  40:Src/main.c    **** //------------------------------------------------------------------------
  41:Src/main.c    **** // Global variables set externally
  42:Src/main.c    **** //------------------------------------------------------------------------
  43:Src/main.c    **** extern TIM_HandleTypeDef htim_left;
  44:Src/main.c    **** extern TIM_HandleTypeDef htim_right;
  45:Src/main.c    **** extern ADC_HandleTypeDef hadc1;
  46:Src/main.c    **** extern ADC_HandleTypeDef hadc2;
  47:Src/main.c    **** extern volatile adc_buf_t adc_buffer;
  48:Src/main.c    **** #if defined(DEBUG_I2C_LCD) || defined(SUPPORT_LCD)
  49:Src/main.c    ****   extern LCD_PCF8574_HandleTypeDef lcd;
  50:Src/main.c    ****   extern uint8_t LCDerrorFlag;
  51:Src/main.c    **** #endif
  52:Src/main.c    **** 
  53:Src/main.c    **** extern UART_HandleTypeDef huart2;
  54:Src/main.c    **** extern UART_HandleTypeDef huart3;
  55:Src/main.c    **** 
  56:Src/main.c    **** volatile uint8_t uart_buf[200];
  57:Src/main.c    **** 
  58:Src/main.c    **** // Matlab defines - from auto-code generation
  59:Src/main.c    **** //---------------
  60:Src/main.c    **** extern P    rtP_Left;                   /* Block parameters (auto storage) */
  61:Src/main.c    **** extern P    rtP_Right;                  /* Block parameters (auto storage) */
  62:Src/main.c    **** extern ExtY rtY_Left;                   /* External outputs */
  63:Src/main.c    **** extern ExtY rtY_Right;                  /* External outputs */
  64:Src/main.c    **** extern ExtU rtU_Left;                   /* External inputs */
  65:Src/main.c    **** extern ExtU rtU_Right;                  /* External inputs */
  66:Src/main.c    **** //---------------
  67:Src/main.c    **** 
  68:Src/main.c    **** extern uint8_t     inIdx;               // input index used for dual-inputs
  69:Src/main.c    **** extern uint8_t     inIdx_prev;
  70:Src/main.c    **** extern InputStruct input1[];            // input structure
  71:Src/main.c    **** extern InputStruct input2[];            // input structure
  72:Src/main.c    **** 
  73:Src/main.c    **** extern int16_t speedAvg;                // Average measured speed
  74:Src/main.c    **** extern int16_t speedAvgAbs;             // Average measured speed in absolute
  75:Src/main.c    **** extern volatile uint32_t timeoutCntGen; // Timeout counter for the General timeout (PPM, PWM, Nunch
  76:Src/main.c    **** extern volatile uint8_t  timeoutFlgGen; // Timeout Flag for the General timeout (PPM, PWM, Nunchuk)
  77:Src/main.c    **** extern uint8_t timeoutFlgADC;           // Timeout Flag for for ADC Protection: 0 = OK, 1 = Problem
  78:Src/main.c    **** extern uint8_t timeoutFlgSerial;        // Timeout Flag for Rx Serial command: 0 = OK, 1 = Problem 
  79:Src/main.c    **** 
  80:Src/main.c    **** extern volatile int pwml;               // global variable for pwm left. -1000 to 1000
  81:Src/main.c    **** extern volatile int pwmr;               // global variable for pwm right. -1000 to 1000
  82:Src/main.c    **** 
  83:Src/main.c    **** extern uint8_t enable;                  // global variable for motor enable
  84:Src/main.c    **** 
  85:Src/main.c    **** extern int16_t batVoltage;              // global variable for battery voltage
  86:Src/main.c    **** 
  87:Src/main.c    **** #if defined(SIDEBOARD_SERIAL_USART2)
  88:Src/main.c    **** extern SerialSideboard Sideboard_L;
  89:Src/main.c    **** #endif
ARM GAS  /var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//cco5HlIp.s 			page 3


  90:Src/main.c    **** #if defined(SIDEBOARD_SERIAL_USART3)
  91:Src/main.c    **** extern SerialSideboard Sideboard_R;
  92:Src/main.c    **** #endif
  93:Src/main.c    **** #if (defined(CONTROL_PPM_LEFT) && defined(DEBUG_SERIAL_USART3)) || (defined(CONTROL_PPM_RIGHT) && d
  94:Src/main.c    **** extern volatile uint16_t ppm_captured_value[PPM_NUM_CHANNELS+1];
  95:Src/main.c    **** #endif
  96:Src/main.c    **** #if (defined(CONTROL_PWM_LEFT) && defined(DEBUG_SERIAL_USART3)) || (defined(CONTROL_PWM_RIGHT) && d
  97:Src/main.c    **** extern volatile uint16_t pwm_captured_ch1_value;
  98:Src/main.c    **** extern volatile uint16_t pwm_captured_ch2_value;
  99:Src/main.c    **** #endif
 100:Src/main.c    **** 
 101:Src/main.c    **** 
 102:Src/main.c    **** //------------------------------------------------------------------------
 103:Src/main.c    **** // Global variables set here in main.c
 104:Src/main.c    **** //------------------------------------------------------------------------
 105:Src/main.c    **** uint8_t backwardDrive;
 106:Src/main.c    **** extern volatile uint32_t buzzerTimer;
 107:Src/main.c    **** volatile uint32_t main_loop_counter;
 108:Src/main.c    **** int16_t batVoltageCalib;         // global variable for calibrated battery voltage
 109:Src/main.c    **** int16_t board_temp_deg_c;        // global variable for calibrated temperature in degrees Celsius
 110:Src/main.c    **** int16_t left_dc_curr;            // global variable for Left DC Link current 
 111:Src/main.c    **** int16_t right_dc_curr;           // global variable for Right DC Link current
 112:Src/main.c    **** int16_t dc_curr;                 // global variable for Total DC Link current 
 113:Src/main.c    **** int16_t cmdL;                    // global variable for Left Command 
 114:Src/main.c    **** int16_t cmdR;                    // global variable for Right Command 
 115:Src/main.c    **** 
 116:Src/main.c    **** //------------------------------------------------------------------------
 117:Src/main.c    **** // Local variables
 118:Src/main.c    **** //------------------------------------------------------------------------
 119:Src/main.c    **** #if defined(FEEDBACK_SERIAL_USART2) || defined(FEEDBACK_SERIAL_USART3)
 120:Src/main.c    **** typedef struct{
 121:Src/main.c    ****   uint16_t  start;
 122:Src/main.c    ****   int16_t   cmd1;
 123:Src/main.c    ****   int16_t   cmd2;
 124:Src/main.c    ****   int16_t   speedR_meas;
 125:Src/main.c    ****   int16_t   speedL_meas;
 126:Src/main.c    ****   int16_t   batVoltage;
 127:Src/main.c    ****   int16_t   boardTemp;
 128:Src/main.c    ****   uint16_t  cmdLed;
 129:Src/main.c    ****   uint16_t  checksum;
 130:Src/main.c    **** } SerialFeedback;
 131:Src/main.c    **** static SerialFeedback Feedback;
 132:Src/main.c    **** #endif
 133:Src/main.c    **** #if defined(FEEDBACK_SERIAL_USART2)
 134:Src/main.c    **** static uint8_t sideboard_leds_L;
 135:Src/main.c    **** #endif
 136:Src/main.c    **** #if defined(FEEDBACK_SERIAL_USART3)
 137:Src/main.c    **** static uint8_t sideboard_leds_R;
 138:Src/main.c    **** #endif
 139:Src/main.c    **** 
 140:Src/main.c    **** #ifdef VARIANT_TRANSPOTTER
 141:Src/main.c    ****   extern uint8_t  nunchuk_connected;
 142:Src/main.c    ****   extern float    setDistance;  
 143:Src/main.c    **** 
 144:Src/main.c    ****   static uint8_t  checkRemote = 0;
 145:Src/main.c    ****   static uint16_t distance;
 146:Src/main.c    ****   static float    steering;
ARM GAS  /var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//cco5HlIp.s 			page 4


 147:Src/main.c    ****   static int      distanceErr;  
 148:Src/main.c    ****   static int      lastDistance = 0;
 149:Src/main.c    ****   static uint16_t transpotter_counter = 0;
 150:Src/main.c    **** #endif
 151:Src/main.c    **** 
 152:Src/main.c    **** static int16_t    speed;                // local variable for speed. -1000 to 1000
 153:Src/main.c    **** #ifndef VARIANT_TRANSPOTTER
 154:Src/main.c    ****   static int16_t  steer;                // local variable for steering. -1000 to 1000
 155:Src/main.c    ****   static int16_t  steerRateFixdt;       // local fixed-point variable for steering rate limiter
 156:Src/main.c    ****   static int16_t  speedRateFixdt;       // local fixed-point variable for speed rate limiter
 157:Src/main.c    ****   static int32_t  steerFixdt;           // local fixed-point variable for steering low-pass filter
 158:Src/main.c    ****   static int32_t  speedFixdt;           // local fixed-point variable for speed low-pass filter
 159:Src/main.c    **** #endif
 160:Src/main.c    **** 
 161:Src/main.c    **** static uint32_t    buzzerTimer_prev = 0;
 162:Src/main.c    **** static uint32_t    inactivity_timeout_counter;
 163:Src/main.c    **** static MultipleTap MultipleTapBrake;    // define multiple tap functionality for the Brake pedal
 164:Src/main.c    **** 
 165:Src/main.c    **** int main(void) {
 166:Src/main.c    **** 
 167:Src/main.c    ****   HAL_Init();
 168:Src/main.c    ****   __HAL_RCC_AFIO_CLK_ENABLE();
 169:Src/main.c    ****   HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 170:Src/main.c    ****   /* System interrupt init*/
 171:Src/main.c    ****   /* MemoryManagement_IRQn interrupt configuration */
 172:Src/main.c    ****   HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 173:Src/main.c    ****   /* BusFault_IRQn interrupt configuration */
 174:Src/main.c    ****   HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 175:Src/main.c    ****   /* UsageFault_IRQn interrupt configuration */
 176:Src/main.c    ****   HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 177:Src/main.c    ****   /* SVCall_IRQn interrupt configuration */
 178:Src/main.c    ****   HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 179:Src/main.c    ****   /* DebugMonitor_IRQn interrupt configuration */
 180:Src/main.c    ****   HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 181:Src/main.c    ****   /* PendSV_IRQn interrupt configuration */
 182:Src/main.c    ****   HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 183:Src/main.c    ****   /* SysTick_IRQn interrupt configuration */
 184:Src/main.c    ****   HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 185:Src/main.c    **** 
 186:Src/main.c    ****   SystemClock_Config();
 187:Src/main.c    **** 
 188:Src/main.c    ****   __HAL_RCC_DMA1_CLK_DISABLE();
 189:Src/main.c    ****   MX_GPIO_Init();
 190:Src/main.c    ****   MX_TIM_Init();
 191:Src/main.c    ****   MX_ADC1_Init();
 192:Src/main.c    ****   MX_ADC2_Init();
 193:Src/main.c    ****   BLDC_Init();        // BLDC Controller Init
 194:Src/main.c    **** 
 195:Src/main.c    ****   HAL_GPIO_WritePin(OFF_PORT, OFF_PIN, GPIO_PIN_SET);   // Activate Latch
 196:Src/main.c    ****   Input_Lim_Init();   // Input Limitations Init
 197:Src/main.c    ****   Input_Init();       // Input Init
 198:Src/main.c    **** 
 199:Src/main.c    ****   HAL_ADC_Start(&hadc1);
 200:Src/main.c    ****   HAL_ADC_Start(&hadc2);
 201:Src/main.c    **** 
 202:Src/main.c    ****   poweronMelody();
 203:Src/main.c    ****   HAL_GPIO_WritePin(LED_PORT, LED_PIN, GPIO_PIN_SET);
ARM GAS  /var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//cco5HlIp.s 			page 5


 204:Src/main.c    ****   
 205:Src/main.c    ****   int32_t board_temp_adcFixdt = adc_buffer.temp << 16;  // Fixed-point filter output initialized wi
 206:Src/main.c    ****   int16_t board_temp_adcFilt  = adc_buffer.temp;
 207:Src/main.c    **** 
 208:Src/main.c    ****   // Loop until button is released
 209:Src/main.c    ****   while(HAL_GPIO_ReadPin(BUTTON_PORT, BUTTON_PIN)) { HAL_Delay(10); }
 210:Src/main.c    **** 
 211:Src/main.c    ****   while(1) {
 212:Src/main.c    ****     if (buzzerTimer - buzzerTimer_prev > 16*DELAY_IN_MAIN_LOOP) {   // 1 ms = 16 ticks buzzerTimer
 213:Src/main.c    **** 
 214:Src/main.c    ****     readCommand();                        // Read Command: input1[inIdx].cmd, input2[inIdx].cmd
 215:Src/main.c    ****     calcAvgSpeed();                       // Calculate average measured speed: speedAvg, speedAvgAb
 216:Src/main.c    **** 
 217:Src/main.c    ****     #ifndef VARIANT_TRANSPOTTER
 218:Src/main.c    ****       // ####### MOTOR ENABLING: Only if the initial input is very small (for SAFETY) #######
 219:Src/main.c    ****       if (enable == 0 && (!rtY_Left.z_errCode && !rtY_Right.z_errCode) && (input1[inIdx].cmd > -50 
 220:Src/main.c    ****         beepShort(6);                     // make 2 beeps indicating the motor enable
 221:Src/main.c    ****         beepShort(4); HAL_Delay(100);
 222:Src/main.c    ****         steerFixdt = speedFixdt = 0;      // reset filters
 223:Src/main.c    ****         enable = 1;                       // enable motors
 224:Src/main.c    ****         #if defined(DEBUG_SERIAL_USART2) || defined(DEBUG_SERIAL_USART3)
 225:Src/main.c    ****         printf("-- Motors enabled --\r\n");
 226:Src/main.c    ****         #endif
 227:Src/main.c    ****       }
 228:Src/main.c    **** 
 229:Src/main.c    ****       // ####### VARIANT_HOVERCAR #######
 230:Src/main.c    ****       #if defined(VARIANT_HOVERCAR) || defined(VARIANT_SKATEBOARD) || defined(ELECTRIC_BRAKE_ENABLE
 231:Src/main.c    ****         uint16_t speedBlend;                                        // Calculate speed Blend, a num
 232:Src/main.c    ****         speedBlend = (uint16_t)(((CLAMP(speedAvgAbs,10,60) - 10) << 15) / 50); // speedBlend [0,1] 
 233:Src/main.c    ****       #endif
 234:Src/main.c    **** 
 235:Src/main.c    ****       #ifdef STANDSTILL_HOLD_ENABLE
 236:Src/main.c    ****         standstillHold();                                           // Apply Standstill Hold functi
 237:Src/main.c    ****       #endif
 238:Src/main.c    **** 
 239:Src/main.c    ****       #ifdef VARIANT_HOVERCAR
 240:Src/main.c    ****       if (inIdx == CONTROL_ADC) {                                   // Only use use implementation 
 241:Src/main.c    ****         if (speedAvgAbs < 60) {                                     // Check if Hovercar is physica
 242:Src/main.c    ****           multipleTapDet(input1[inIdx].cmd, HAL_GetTick(), &MultipleTapBrake); // Brake pedal in th
 243:Src/main.c    ****         }
 244:Src/main.c    **** 
 245:Src/main.c    ****         if (input1[inIdx].cmd > 30) {                               // If Brake pedal (input1) is p
 246:Src/main.c    ****           input2[inIdx].cmd = (int16_t)((input2[inIdx].cmd * speedBlend) >> 15);
 247:Src/main.c    ****           cruiseControl((uint8_t)rtP_Left.b_cruiseCtrlEna);         // Cruise control deactivated b
 248:Src/main.c    ****         }
 249:Src/main.c    ****       }
 250:Src/main.c    ****       #endif
 251:Src/main.c    **** 
 252:Src/main.c    ****       #ifdef ELECTRIC_BRAKE_ENABLE
 253:Src/main.c    ****         electricBrake(speedBlend, MultipleTapBrake.b_multipleTap);  // Apply Electric Brake. Only a
 254:Src/main.c    ****       #endif
 255:Src/main.c    **** 
 256:Src/main.c    ****       #ifdef VARIANT_HOVERCAR
 257:Src/main.c    ****       if (inIdx == CONTROL_ADC) {                                   // Only use use implementation 
 258:Src/main.c    ****         if (speedAvg > 0) {                                         // Make sure the Brake pedal is
 259:Src/main.c    ****           input1[inIdx].cmd = (int16_t)((-input1[inIdx].cmd * speedBlend) >> 15);
 260:Src/main.c    ****         } else {
ARM GAS  /var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//cco5HlIp.s 			page 6


 261:Src/main.c    ****           input1[inIdx].cmd = (int16_t)(( input1[inIdx].cmd * speedBlend) >> 15);
 262:Src/main.c    ****         }
 263:Src/main.c    ****       }
 264:Src/main.c    ****       #endif
 265:Src/main.c    **** 
 266:Src/main.c    ****       #ifdef VARIANT_SKATEBOARD
 267:Src/main.c    ****         if (input2[inIdx].cmd < 0) {                                // When Throttle is negative, i
 268:Src/main.c    ****           if (speedAvg > 0) {                                       // Make sure the braking is opp
 269:Src/main.c    ****             input2[inIdx].cmd  = (int16_t)(( input2[inIdx].cmd * speedBlend) >> 15);
 270:Src/main.c    ****           } else {
 271:Src/main.c    ****             input2[inIdx].cmd  = (int16_t)((-input2[inIdx].cmd * speedBlend) >> 15);
 272:Src/main.c    ****           }
 273:Src/main.c    ****         }
 274:Src/main.c    ****       #endif
 275:Src/main.c    **** 
 276:Src/main.c    ****       // ####### LOW-PASS FILTER #######
 277:Src/main.c    ****       rateLimiter16(input1[inIdx].cmd , RATE, &steerRateFixdt);
 278:Src/main.c    ****       rateLimiter16(input2[inIdx].cmd , RATE, &speedRateFixdt);
 279:Src/main.c    ****       filtLowPass32(steerRateFixdt >> 4, FILTER, &steerFixdt);
 280:Src/main.c    ****       filtLowPass32(speedRateFixdt >> 4, FILTER, &speedFixdt);
 281:Src/main.c    ****       steer = (int16_t)(steerFixdt >> 16);  // convert fixed-point to integer
 282:Src/main.c    ****       speed = (int16_t)(speedFixdt >> 16);  // convert fixed-point to integer
 283:Src/main.c    **** 
 284:Src/main.c    ****       // ####### VARIANT_HOVERCAR #######
 285:Src/main.c    ****       #ifdef VARIANT_HOVERCAR
 286:Src/main.c    ****       if (inIdx == CONTROL_ADC) {               // Only use use implementation below if pedals are 
 287:Src/main.c    ****         if (!MultipleTapBrake.b_multipleTap) {  // Check driving direction
 288:Src/main.c    ****           speed = steer + speed;                // Forward driving: in this case steer = Brake, spe
 289:Src/main.c    ****         } else {
 290:Src/main.c    ****           speed = steer - speed;                // Reverse driving: in this case steer = Brake, spe
 291:Src/main.c    ****         }
 292:Src/main.c    ****         steer = 0;                              // Do not apply steering to avoid side effects if S
 293:Src/main.c    ****       }
 294:Src/main.c    ****       #endif
 295:Src/main.c    **** 
 296:Src/main.c    ****       // ####### MIXER #######
 297:Src/main.c    ****       // cmdR = CLAMP((int)(speed * SPEED_COEFFICIENT -  steer * STEER_COEFFICIENT), INPUT_MIN, INP
 298:Src/main.c    ****       // cmdL = CLAMP((int)(speed * SPEED_COEFFICIENT +  steer * STEER_COEFFICIENT), INPUT_MIN, INP
 299:Src/main.c    ****       mixerFcn(speed << 4, steer << 4, &cmdR, &cmdL);   // This function implements the equations a
 300:Src/main.c    **** 
 301:Src/main.c    ****       // ####### SET OUTPUTS (if the target change is less than +/- 100) #######
 302:Src/main.c    ****       #ifdef INVERT_R_DIRECTION
 303:Src/main.c    ****         pwmr = cmdR;
 304:Src/main.c    ****       #else
 305:Src/main.c    ****         pwmr = -cmdR;
 306:Src/main.c    ****       #endif
 307:Src/main.c    ****       #ifdef INVERT_L_DIRECTION
 308:Src/main.c    ****         pwml = -cmdL;
 309:Src/main.c    ****       #else
 310:Src/main.c    ****         pwml = cmdL;
 311:Src/main.c    ****       #endif
 312:Src/main.c    ****     #endif
 313:Src/main.c    **** 
 314:Src/main.c    ****     #ifdef VARIANT_TRANSPOTTER
 315:Src/main.c    ****       distance    = CLAMP(input1[inIdx].cmd - 180, 0, 4095);
 316:Src/main.c    ****       steering    = (input2[inIdx].cmd - 2048) / 2048.0;
 317:Src/main.c    ****       distanceErr = distance - (int)(setDistance * 1345);
ARM GAS  /var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//cco5HlIp.s 			page 7


 318:Src/main.c    **** 
 319:Src/main.c    ****       if (nunchuk_connected == 0) {
 320:Src/main.c    ****         cmdL = cmdL * 0.8f + (CLAMP(distanceErr + (steering*((float)MAX(ABS(distanceErr), 50)) * RO
 321:Src/main.c    ****         cmdR = cmdR * 0.8f + (CLAMP(distanceErr - (steering*((float)MAX(ABS(distanceErr), 50)) * RO
 322:Src/main.c    ****         if (distanceErr > 0) {
 323:Src/main.c    ****           enable = 1;
 324:Src/main.c    ****         }
 325:Src/main.c    ****         if (distanceErr > -300) {
 326:Src/main.c    ****           #ifdef INVERT_R_DIRECTION
 327:Src/main.c    ****             pwmr = cmdR;
 328:Src/main.c    ****           #else
 329:Src/main.c    ****             pwmr = -cmdR;
 330:Src/main.c    ****           #endif
 331:Src/main.c    ****           #ifdef INVERT_L_DIRECTION
 332:Src/main.c    ****             pwml = -cmdL;
 333:Src/main.c    ****           #else
 334:Src/main.c    ****             pwml = cmdL;
 335:Src/main.c    ****           #endif
 336:Src/main.c    **** 
 337:Src/main.c    ****           if (checkRemote) {
 338:Src/main.c    ****             if (!HAL_GPIO_ReadPin(LED_PORT, LED_PIN)) {
 339:Src/main.c    ****               //enable = 1;
 340:Src/main.c    ****             } else {
 341:Src/main.c    ****               enable = 0;
 342:Src/main.c    ****             }
 343:Src/main.c    ****           }
 344:Src/main.c    ****         } else {
 345:Src/main.c    ****           enable = 0;
 346:Src/main.c    ****         }
 347:Src/main.c    ****         timeoutCntGen = 0;
 348:Src/main.c    ****         timeoutFlgGen = 0;
 349:Src/main.c    ****       }
 350:Src/main.c    **** 
 351:Src/main.c    ****       if (timeoutFlgGen) {
 352:Src/main.c    ****         pwml = 0;
 353:Src/main.c    ****         pwmr = 0;
 354:Src/main.c    ****         enable = 0;
 355:Src/main.c    ****         #ifdef SUPPORT_LCD
 356:Src/main.c    ****           LCD_SetLocation(&lcd,  0, 0); LCD_WriteString(&lcd, "Len:");
 357:Src/main.c    ****           LCD_SetLocation(&lcd,  8, 0); LCD_WriteString(&lcd, "m(");
 358:Src/main.c    ****           LCD_SetLocation(&lcd, 14, 0); LCD_WriteString(&lcd, "m)");
 359:Src/main.c    ****         #endif
 360:Src/main.c    ****         HAL_Delay(1000);
 361:Src/main.c    ****         nunchuk_connected = 0;
 362:Src/main.c    ****       }
 363:Src/main.c    **** 
 364:Src/main.c    ****       if ((distance / 1345.0) - setDistance > 0.5 && (lastDistance / 1345.0) - setDistance > 0.5) {
 365:Src/main.c    ****         enable = 0;
 366:Src/main.c    ****         beepLong(5);
 367:Src/main.c    ****         #ifdef SUPPORT_LCD
 368:Src/main.c    ****           LCD_ClearDisplay(&lcd);
 369:Src/main.c    ****           HAL_Delay(5);
 370:Src/main.c    ****           LCD_SetLocation(&lcd, 0, 0); LCD_WriteString(&lcd, "Emergency Off!");
 371:Src/main.c    ****           LCD_SetLocation(&lcd, 0, 1); LCD_WriteString(&lcd, "Keeper too fast.");
 372:Src/main.c    ****         #endif
 373:Src/main.c    ****         poweroff();
 374:Src/main.c    ****       }
ARM GAS  /var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//cco5HlIp.s 			page 8


 375:Src/main.c    **** 
 376:Src/main.c    ****       #ifdef SUPPORT_NUNCHUK
 377:Src/main.c    ****         if (transpotter_counter % 500 == 0) {
 378:Src/main.c    ****           if (nunchuk_connected == 0 && enable == 0) {
 379:Src/main.c    ****             if (Nunchuk_Ping()) {
 380:Src/main.c    ****               HAL_Delay(500);
 381:Src/main.c    ****               Nunchuk_Init();
 382:Src/main.c    ****               #ifdef SUPPORT_LCD
 383:Src/main.c    ****                 LCD_SetLocation(&lcd, 0, 0); LCD_WriteString(&lcd, "Nunchuk Control");
 384:Src/main.c    ****               #endif
 385:Src/main.c    ****               timeoutCntGen = 0;
 386:Src/main.c    ****               timeoutFlgGen = 0;
 387:Src/main.c    ****               HAL_Delay(1000);
 388:Src/main.c    ****               nunchuk_connected = 1;
 389:Src/main.c    ****             }
 390:Src/main.c    ****           }
 391:Src/main.c    ****         }   
 392:Src/main.c    ****       #endif
 393:Src/main.c    **** 
 394:Src/main.c    ****       #ifdef SUPPORT_LCD
 395:Src/main.c    ****         if (transpotter_counter % 100 == 0) {
 396:Src/main.c    ****           if (LCDerrorFlag == 1 && enable == 0) {
 397:Src/main.c    **** 
 398:Src/main.c    ****           } else {
 399:Src/main.c    ****             if (nunchuk_connected == 0) {
 400:Src/main.c    ****               LCD_SetLocation(&lcd,  4, 0); LCD_WriteFloat(&lcd,distance/1345.0,2);
 401:Src/main.c    ****               LCD_SetLocation(&lcd, 10, 0); LCD_WriteFloat(&lcd,setDistance,2);
 402:Src/main.c    ****             }
 403:Src/main.c    ****             LCD_SetLocation(&lcd,  4, 1); LCD_WriteFloat(&lcd,batVoltage, 1);
 404:Src/main.c    ****             // LCD_SetLocation(&lcd, 11, 1); LCD_WriteFloat(&lcd,MAX(ABS(currentR), ABS(currentL)),
 405:Src/main.c    ****           }
 406:Src/main.c    ****         }
 407:Src/main.c    ****       #endif
 408:Src/main.c    ****       transpotter_counter++;
 409:Src/main.c    ****     #endif
 410:Src/main.c    **** 
 411:Src/main.c    ****     // ####### SIDEBOARDS HANDLING #######
 412:Src/main.c    ****     #if defined(SIDEBOARD_SERIAL_USART2) && defined(FEEDBACK_SERIAL_USART2)
 413:Src/main.c    ****       sideboardLeds(&sideboard_leds_L);
 414:Src/main.c    ****       sideboardSensors((uint8_t)Sideboard_L.sensors);
 415:Src/main.c    ****     #endif
 416:Src/main.c    ****     #if defined(SIDEBOARD_SERIAL_USART3) && defined(FEEDBACK_SERIAL_USART3)
 417:Src/main.c    ****       sideboardLeds(&sideboard_leds_R);
 418:Src/main.c    ****       sideboardSensors((uint8_t)Sideboard_R.sensors);
 419:Src/main.c    ****     #endif
 420:Src/main.c    **** 
 421:Src/main.c    ****     // ####### CALC BOARD TEMPERATURE #######
 422:Src/main.c    ****     filtLowPass32(adc_buffer.temp, TEMP_FILT_COEF, &board_temp_adcFixdt);
 423:Src/main.c    ****     board_temp_adcFilt  = (int16_t)(board_temp_adcFixdt >> 16);  // convert fixed-point to integer
 424:Src/main.c    ****     board_temp_deg_c    = (TEMP_CAL_HIGH_DEG_C - TEMP_CAL_LOW_DEG_C) * (board_temp_adcFilt - TEMP_C
 425:Src/main.c    **** 
 426:Src/main.c    ****     // ####### CALC CALIBRATED BATTERY VOLTAGE #######
 427:Src/main.c    ****     batVoltageCalib = batVoltage * BAT_CALIB_REAL_VOLTAGE / BAT_CALIB_ADC;
 428:Src/main.c    **** 
 429:Src/main.c    ****     // ####### CALC DC LINK CURRENT #######
 430:Src/main.c    ****     left_dc_curr  = -(rtU_Left.i_DCLink * 100) / A2BIT_CONV;   // Left DC Link Current * 100 
 431:Src/main.c    ****     right_dc_curr = -(rtU_Right.i_DCLink * 100) / A2BIT_CONV;  // Right DC Link Current * 100
ARM GAS  /var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//cco5HlIp.s 			page 9


 432:Src/main.c    ****     dc_curr       = left_dc_curr + right_dc_curr;            // Total DC Link Current * 100
 433:Src/main.c    **** 
 434:Src/main.c    ****     // ####### DEBUG SERIAL OUT #######
 435:Src/main.c    ****     #if defined(DEBUG_SERIAL_USART2) || defined(DEBUG_SERIAL_USART3)
 436:Src/main.c    ****       if (main_loop_counter % 25 == 0) {    // Send data periodically every 125 ms      
 437:Src/main.c    ****         #if defined(DEBUG_SERIAL_PROTOCOL)
 438:Src/main.c    ****           process_debug();
 439:Src/main.c    ****         #else
 440:Src/main.c    ****           printf("in1:%i in2:%i cmdL:%i cmdR:%i BatADC:%i BatV:%i TempADC:%i Temp:%i\r\n",
 441:Src/main.c    ****             input1[inIdx].raw,        // 1: INPUT1
 442:Src/main.c    ****             input2[inIdx].raw,        // 2: INPUT2
 443:Src/main.c    ****             cmdL,                     // 3: output command: [-1000, 1000]
 444:Src/main.c    ****             cmdR,                     // 4: output command: [-1000, 1000]
 445:Src/main.c    ****             adc_buffer.batt1,         // 5: for battery voltage calibration
 446:Src/main.c    ****             batVoltageCalib,          // 6: for verifying battery voltage calibration
 447:Src/main.c    ****             board_temp_adcFilt,       // 7: for board temperature calibration
 448:Src/main.c    ****             board_temp_deg_c);        // 8: for verifying board temperature calibration
 449:Src/main.c    ****         #endif
 450:Src/main.c    ****       }
 451:Src/main.c    ****     #endif
 452:Src/main.c    **** 
 453:Src/main.c    ****     // ####### FEEDBACK SERIAL OUT #######
 454:Src/main.c    ****     #if defined(FEEDBACK_SERIAL_USART2) || defined(FEEDBACK_SERIAL_USART3)
 455:Src/main.c    ****       if (main_loop_counter % 2 == 0) {    // Send data periodically every 10 ms
 456:Src/main.c    ****         Feedback.start	        = (uint16_t)SERIAL_START_FRAME;
 457:Src/main.c    ****         Feedback.cmd1           = (int16_t)input1[inIdx].cmd;
 458:Src/main.c    ****         Feedback.cmd2           = (int16_t)input2[inIdx].cmd;
 459:Src/main.c    ****         Feedback.speedR_meas	  = (int16_t)rtY_Right.n_mot;
 460:Src/main.c    ****         Feedback.speedL_meas	  = (int16_t)rtY_Left.n_mot;
 461:Src/main.c    ****         Feedback.batVoltage	    = (int16_t)batVoltageCalib;
 462:Src/main.c    ****         Feedback.boardTemp	    = (int16_t)board_temp_deg_c;
 463:Src/main.c    **** 
 464:Src/main.c    ****         #if defined(FEEDBACK_SERIAL_USART2)
 465:Src/main.c    ****           if(__HAL_DMA_GET_COUNTER(huart2.hdmatx) == 0) {
 466:Src/main.c    ****             Feedback.cmdLed     = (uint16_t)sideboard_leds_L;
 467:Src/main.c    ****             Feedback.checksum   = (uint16_t)(Feedback.start ^ Feedback.cmd1 ^ Feedback.cmd2 ^ Feedb
 468:Src/main.c    ****                                            ^ Feedback.batVoltage ^ Feedback.boardTemp ^ Feedback.cm
 469:Src/main.c    **** 
 470:Src/main.c    ****             HAL_UART_Transmit_DMA(&huart2, (uint8_t *)&Feedback, sizeof(Feedback));
 471:Src/main.c    ****           }
 472:Src/main.c    ****         #endif
 473:Src/main.c    ****         #if defined(FEEDBACK_SERIAL_USART3)
 474:Src/main.c    ****           if(__HAL_DMA_GET_COUNTER(huart3.hdmatx) == 0) {
 475:Src/main.c    ****             Feedback.cmdLed     = (uint16_t)sideboard_leds_R;
 476:Src/main.c    ****             Feedback.checksum   = (uint16_t)(Feedback.start ^ Feedback.cmd1 ^ Feedback.cmd2 ^ Feedb
 477:Src/main.c    ****                                            ^ Feedback.batVoltage ^ Feedback.boardTemp ^ Feedback.cm
 478:Src/main.c    **** 
 479:Src/main.c    ****             HAL_UART_Transmit_DMA(&huart3, (uint8_t *)&Feedback, sizeof(Feedback));
 480:Src/main.c    ****           }
 481:Src/main.c    ****         #endif
 482:Src/main.c    ****       }
 483:Src/main.c    ****     #endif
 484:Src/main.c    **** 
 485:Src/main.c    ****     // ####### POWEROFF BY POWER-BUTTON #######
 486:Src/main.c    ****     poweroffPressCheck();
 487:Src/main.c    **** 
 488:Src/main.c    ****     // ####### BEEP AND EMERGENCY POWEROFF #######
ARM GAS  /var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//cco5HlIp.s 			page 10


 489:Src/main.c    ****     if ((TEMP_POWEROFF_ENABLE && board_temp_deg_c >= TEMP_POWEROFF && speedAvgAbs < 20) || (batVolt
 490:Src/main.c    ****       poweroff();
 491:Src/main.c    ****     } else if (rtY_Left.z_errCode || rtY_Right.z_errCode) {                                        
 492:Src/main.c    ****       enable = 0;
 493:Src/main.c    ****       beepCount(1, 24, 1);
 494:Src/main.c    ****     } else if (timeoutFlgADC) {                                                                    
 495:Src/main.c    ****       beepCount(2, 24, 1);
 496:Src/main.c    ****     } else if (timeoutFlgSerial) {                                                                 
 497:Src/main.c    ****       beepCount(3, 24, 1);
 498:Src/main.c    ****     } else if (timeoutFlgGen) {                                                                    
 499:Src/main.c    ****       beepCount(4, 24, 1);
 500:Src/main.c    ****     } else if (TEMP_WARNING_ENABLE && board_temp_deg_c >= TEMP_WARNING) {                          
 501:Src/main.c    ****       beepCount(5, 24, 1);
 502:Src/main.c    ****     } else if (BAT_LVL1_ENABLE && batVoltage < BAT_LVL1) {                                         
 503:Src/main.c    ****       beepCount(0, 10, 6);
 504:Src/main.c    ****     } else if (BAT_LVL2_ENABLE && batVoltage < BAT_LVL2) {                                         
 505:Src/main.c    ****       beepCount(0, 10, 30);
 506:Src/main.c    ****     } else if (BEEPS_BACKWARD && ((speed < -50 && speedAvg < 0) || MultipleTapBrake.b_multipleTap))
 507:Src/main.c    ****       beepCount(0, 5, 1);
 508:Src/main.c    ****       backwardDrive = 1;
 509:Src/main.c    ****     } else {  // do not beep
 510:Src/main.c    ****       beepCount(0, 0, 0);
 511:Src/main.c    ****       backwardDrive = 0;
 512:Src/main.c    ****     }
 513:Src/main.c    **** 
 514:Src/main.c    **** 
 515:Src/main.c    ****     // ####### INACTIVITY TIMEOUT #######
 516:Src/main.c    ****     if (abs(cmdL) > 50 || abs(cmdR) > 50) {
 517:Src/main.c    ****       inactivity_timeout_counter = 0;
 518:Src/main.c    ****     } else {
 519:Src/main.c    ****       inactivity_timeout_counter++;
 520:Src/main.c    ****     }
 521:Src/main.c    ****     if (inactivity_timeout_counter > (INACTIVITY_TIMEOUT * 60 * 1000) / (DELAY_IN_MAIN_LOOP + 1)) {
 522:Src/main.c    ****       poweroff();
 523:Src/main.c    ****     }
 524:Src/main.c    **** 
 525:Src/main.c    **** 
 526:Src/main.c    ****     // HAL_GPIO_TogglePin(LED_PORT, LED_PIN);                 // This is to measure the main() loop
 527:Src/main.c    ****     // Update states
 528:Src/main.c    ****     inIdx_prev = inIdx;
 529:Src/main.c    ****     buzzerTimer_prev = buzzerTimer;
 530:Src/main.c    ****     main_loop_counter++;
 531:Src/main.c    ****     }
 532:Src/main.c    ****   }
 533:Src/main.c    **** }
 534:Src/main.c    **** 
 535:Src/main.c    **** 
 536:Src/main.c    **** // ===========================================================
 537:Src/main.c    **** /** System Clock Configuration
 538:Src/main.c    **** */
 539:Src/main.c    **** void SystemClock_Config(void) {
  27              		.loc 1 539 31 view -0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 88
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31 0000 30B5     		push	{r4, r5, lr}
  32              	.LCFI0:
ARM GAS  /var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//cco5HlIp.s 			page 11


  33              		.cfi_def_cfa_offset 12
  34              		.cfi_offset 4, -12
  35              		.cfi_offset 5, -8
  36              		.cfi_offset 14, -4
  37 0002 97B0     		sub	sp, sp, #92
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 104
 540:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct;
  40              		.loc 1 540 3 view .LVU1
 541:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
  41              		.loc 1 541 3 view .LVU2
 542:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit;
  42              		.loc 1 542 3 view .LVU3
 543:Src/main.c    **** 
 544:Src/main.c    ****   /**Initializes the CPU, AHB and APB busses clocks
 545:Src/main.c    ****     */
 546:Src/main.c    ****   RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI;
  43              		.loc 1 546 3 view .LVU4
  44              		.loc 1 546 41 is_stmt 0 view .LVU5
  45 0004 0225     		movs	r5, #2
  46 0006 0C95     		str	r5, [sp, #48]
 547:Src/main.c    ****   RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
  47              		.loc 1 547 3 is_stmt 1 view .LVU6
  48              		.loc 1 547 41 is_stmt 0 view .LVU7
  49 0008 0123     		movs	r3, #1
  50 000a 1093     		str	r3, [sp, #64]
 548:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
  51              		.loc 1 548 3 is_stmt 1 view .LVU8
  52              		.loc 1 548 41 is_stmt 0 view .LVU9
  53 000c 1023     		movs	r3, #16
  54 000e 1193     		str	r3, [sp, #68]
 549:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
  55              		.loc 1 549 3 is_stmt 1 view .LVU10
  56              		.loc 1 549 41 is_stmt 0 view .LVU11
  57 0010 1395     		str	r5, [sp, #76]
 550:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_HSI_DIV2;
  58              		.loc 1 550 3 is_stmt 1 view .LVU12
  59              		.loc 1 550 41 is_stmt 0 view .LVU13
  60 0012 0024     		movs	r4, #0
  61 0014 1494     		str	r4, [sp, #80]
 551:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL          = RCC_PLL_MUL16;
  62              		.loc 1 551 3 is_stmt 1 view .LVU14
  63              		.loc 1 551 41 is_stmt 0 view .LVU15
  64 0016 4FF46013 		mov	r3, #3670016
  65 001a 1593     		str	r3, [sp, #84]
 552:Src/main.c    ****   HAL_RCC_OscConfig(&RCC_OscInitStruct);
  66              		.loc 1 552 3 is_stmt 1 view .LVU16
  67 001c 0CA8     		add	r0, sp, #48
  68 001e FFF7FEFF 		bl	HAL_RCC_OscConfig
  69              	.LVL0:
 553:Src/main.c    **** 
 554:Src/main.c    ****   /**Initializes the CPU, AHB and APB busses clocks
 555:Src/main.c    ****     */
 556:Src/main.c    ****   RCC_ClkInitStruct.ClockType           = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE
  70              		.loc 1 556 3 view .LVU17
  71              		.loc 1 556 41 is_stmt 0 view .LVU18
  72 0022 0F23     		movs	r3, #15
ARM GAS  /var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//cco5HlIp.s 			page 12


  73 0024 0793     		str	r3, [sp, #28]
 557:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource        = RCC_SYSCLKSOURCE_PLLCLK;
  74              		.loc 1 557 3 is_stmt 1 view .LVU19
  75              		.loc 1 557 41 is_stmt 0 view .LVU20
  76 0026 0895     		str	r5, [sp, #32]
 558:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider       = RCC_SYSCLK_DIV1;
  77              		.loc 1 558 3 is_stmt 1 view .LVU21
  78              		.loc 1 558 41 is_stmt 0 view .LVU22
  79 0028 0994     		str	r4, [sp, #36]
 559:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider      = RCC_HCLK_DIV2;
  80              		.loc 1 559 3 is_stmt 1 view .LVU23
  81              		.loc 1 559 41 is_stmt 0 view .LVU24
  82 002a 4FF48063 		mov	r3, #1024
  83 002e 0A93     		str	r3, [sp, #40]
 560:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider      = RCC_HCLK_DIV1;
  84              		.loc 1 560 3 is_stmt 1 view .LVU25
  85              		.loc 1 560 41 is_stmt 0 view .LVU26
  86 0030 0B94     		str	r4, [sp, #44]
 561:Src/main.c    **** 
 562:Src/main.c    ****   HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
  87              		.loc 1 562 3 is_stmt 1 view .LVU27
  88 0032 2946     		mov	r1, r5
  89 0034 07A8     		add	r0, sp, #28
  90 0036 FFF7FEFF 		bl	HAL_RCC_ClockConfig
  91              	.LVL1:
 563:Src/main.c    **** 
 564:Src/main.c    ****   PeriphClkInit.PeriphClockSelection    = RCC_PERIPHCLK_ADC;
  92              		.loc 1 564 3 view .LVU28
  93              		.loc 1 564 41 is_stmt 0 view .LVU29
  94 003a 0195     		str	r5, [sp, #4]
 565:Src/main.c    ****   // PeriphClkInit.AdcClockSelection    = RCC_ADCPCLK2_DIV8;  // 8 MHz
 566:Src/main.c    ****   PeriphClkInit.AdcClockSelection       = RCC_ADCPCLK2_DIV4;  // 16 MHz
  95              		.loc 1 566 3 is_stmt 1 view .LVU30
  96              		.loc 1 566 41 is_stmt 0 view .LVU31
  97 003c 4FF48043 		mov	r3, #16384
  98 0040 0393     		str	r3, [sp, #12]
 567:Src/main.c    ****   HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
  99              		.loc 1 567 3 is_stmt 1 view .LVU32
 100 0042 01A8     		add	r0, sp, #4
 101 0044 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 102              	.LVL2:
 568:Src/main.c    **** 
 569:Src/main.c    ****   /**Configure the Systick interrupt time
 570:Src/main.c    ****     */
 571:Src/main.c    ****   HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 103              		.loc 1 571 3 view .LVU33
 104              		.loc 1 571 22 is_stmt 0 view .LVU34
 105 0048 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 106              	.LVL3:
 107              		.loc 1 571 3 view .LVU35
 108 004c 084B     		ldr	r3, .L3
 109 004e A3FB0030 		umull	r3, r0, r3, r0
 110 0052 8009     		lsrs	r0, r0, #6
 111 0054 FFF7FEFF 		bl	HAL_SYSTICK_Config
 112              	.LVL4:
 572:Src/main.c    **** 
 573:Src/main.c    ****   /**Configure the Systick
ARM GAS  /var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//cco5HlIp.s 			page 13


 574:Src/main.c    ****     */
 575:Src/main.c    ****   HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 113              		.loc 1 575 3 is_stmt 1 view .LVU36
 114 0058 0420     		movs	r0, #4
 115 005a FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 116              	.LVL5:
 576:Src/main.c    **** 
 577:Src/main.c    ****   /* SysTick_IRQn interrupt configuration */
 578:Src/main.c    ****   HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 117              		.loc 1 578 3 view .LVU37
 118 005e 2246     		mov	r2, r4
 119 0060 2146     		mov	r1, r4
 120 0062 4FF0FF30 		mov	r0, #-1
 121 0066 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 122              	.LVL6:
 579:Src/main.c    **** }
 123              		.loc 1 579 1 is_stmt 0 view .LVU38
 124 006a 17B0     		add	sp, sp, #92
 125              	.LCFI2:
 126              		.cfi_def_cfa_offset 12
 127              		@ sp needed
 128 006c 30BD     		pop	{r4, r5, pc}
 129              	.L4:
 130 006e 00BF     		.align	2
 131              	.L3:
 132 0070 D34D6210 		.word	274877907
 133              		.cfi_endproc
 134              	.LFE67:
 136              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 137              		.align	2
 138              	.LC0:
 139 0000 2D2D204D 		.ascii	"-- Motors enabled --\015\000"
 139      6F746F72 
 139      7320656E 
 139      61626C65 
 139      64202D2D 
 140 0016 0000     		.align	2
 141              	.LC1:
 142 0018 696E313A 		.ascii	"in1:%i in2:%i cmdL:%i cmdR:%i BatADC:%i BatV:%i Tem"
 142      25692069 
 142      6E323A25 
 142      6920636D 
 142      644C3A25 
 143 004b 70414443 		.ascii	"pADC:%i Temp:%i\015\012\000"
 143      3A256920 
 143      54656D70 
 143      3A25690D 
 143      0A00
 144              		.section	.text.main,"ax",%progbits
 145              		.align	1
 146              		.global	main
 147              		.syntax unified
 148              		.thumb
 149              		.thumb_func
 150              		.fpu softvfp
 152              	main:
 153              	.LFB66:
ARM GAS  /var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//cco5HlIp.s 			page 14


 165:Src/main.c    **** 
 154              		.loc 1 165 16 is_stmt 1 view -0
 155              		.cfi_startproc
 156              		@ args = 0, pretend = 0, frame = 8
 157              		@ frame_needed = 0, uses_anonymous_args = 0
 158 0000 70B5     		push	{r4, r5, r6, lr}
 159              	.LCFI3:
 160              		.cfi_def_cfa_offset 16
 161              		.cfi_offset 4, -16
 162              		.cfi_offset 5, -12
 163              		.cfi_offset 6, -8
 164              		.cfi_offset 14, -4
 165 0002 88B0     		sub	sp, sp, #32
 166              	.LCFI4:
 167              		.cfi_def_cfa_offset 48
 167:Src/main.c    ****   __HAL_RCC_AFIO_CLK_ENABLE();
 168              		.loc 1 167 3 view .LVU40
 169 0004 FFF7FEFF 		bl	HAL_Init
 170              	.LVL7:
 168:Src/main.c    ****   HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 171              		.loc 1 168 3 view .LVU41
 172              	.LBB2:
 168:Src/main.c    ****   HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 173              		.loc 1 168 3 view .LVU42
 168:Src/main.c    ****   HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 174              		.loc 1 168 3 view .LVU43
 175 0008 364C     		ldr	r4, .L30
 176 000a A369     		ldr	r3, [r4, #24]
 177 000c 43F00103 		orr	r3, r3, #1
 178 0010 A361     		str	r3, [r4, #24]
 168:Src/main.c    ****   HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 179              		.loc 1 168 3 view .LVU44
 180 0012 A369     		ldr	r3, [r4, #24]
 181 0014 03F00103 		and	r3, r3, #1
 182 0018 0693     		str	r3, [sp, #24]
 168:Src/main.c    ****   HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 183              		.loc 1 168 3 view .LVU45
 184 001a 069B     		ldr	r3, [sp, #24]
 185              	.LBE2:
 168:Src/main.c    ****   HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 186              		.loc 1 168 3 view .LVU46
 169:Src/main.c    ****   /* System interrupt init*/
 187              		.loc 1 169 3 view .LVU47
 188 001c 0320     		movs	r0, #3
 189 001e FFF7FEFF 		bl	HAL_NVIC_SetPriorityGrouping
 190              	.LVL8:
 172:Src/main.c    ****   /* BusFault_IRQn interrupt configuration */
 191              		.loc 1 172 3 view .LVU48
 192 0022 0022     		movs	r2, #0
 193 0024 1146     		mov	r1, r2
 194 0026 6FF00B00 		mvn	r0, #11
 195 002a FFF7FEFF 		bl	HAL_NVIC_SetPriority
 196              	.LVL9:
 174:Src/main.c    ****   /* UsageFault_IRQn interrupt configuration */
 197              		.loc 1 174 3 view .LVU49
 198 002e 0022     		movs	r2, #0
 199 0030 1146     		mov	r1, r2
ARM GAS  /var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//cco5HlIp.s 			page 15


 200 0032 6FF00A00 		mvn	r0, #10
 201 0036 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 202              	.LVL10:
 176:Src/main.c    ****   /* SVCall_IRQn interrupt configuration */
 203              		.loc 1 176 3 view .LVU50
 204 003a 0022     		movs	r2, #0
 205 003c 1146     		mov	r1, r2
 206 003e 6FF00900 		mvn	r0, #9
 207 0042 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 208              	.LVL11:
 178:Src/main.c    ****   /* DebugMonitor_IRQn interrupt configuration */
 209              		.loc 1 178 3 view .LVU51
 210 0046 0022     		movs	r2, #0
 211 0048 1146     		mov	r1, r2
 212 004a 6FF00400 		mvn	r0, #4
 213 004e FFF7FEFF 		bl	HAL_NVIC_SetPriority
 214              	.LVL12:
 180:Src/main.c    ****   /* PendSV_IRQn interrupt configuration */
 215              		.loc 1 180 3 view .LVU52
 216 0052 0022     		movs	r2, #0
 217 0054 1146     		mov	r1, r2
 218 0056 6FF00300 		mvn	r0, #3
 219 005a FFF7FEFF 		bl	HAL_NVIC_SetPriority
 220              	.LVL13:
 182:Src/main.c    ****   /* SysTick_IRQn interrupt configuration */
 221              		.loc 1 182 3 view .LVU53
 222 005e 0022     		movs	r2, #0
 223 0060 1146     		mov	r1, r2
 224 0062 6FF00100 		mvn	r0, #1
 225 0066 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 226              	.LVL14:
 184:Src/main.c    **** 
 227              		.loc 1 184 3 view .LVU54
 228 006a 0022     		movs	r2, #0
 229 006c 1146     		mov	r1, r2
 230 006e 4FF0FF30 		mov	r0, #-1
 231 0072 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 232              	.LVL15:
 186:Src/main.c    **** 
 233              		.loc 1 186 3 view .LVU55
 234 0076 FFF7FEFF 		bl	SystemClock_Config
 235              	.LVL16:
 188:Src/main.c    ****   MX_GPIO_Init();
 236              		.loc 1 188 3 view .LVU56
 237 007a 6369     		ldr	r3, [r4, #20]
 238 007c 23F00103 		bic	r3, r3, #1
 239 0080 6361     		str	r3, [r4, #20]
 189:Src/main.c    ****   MX_TIM_Init();
 240              		.loc 1 189 3 view .LVU57
 241 0082 FFF7FEFF 		bl	MX_GPIO_Init
 242              	.LVL17:
 190:Src/main.c    ****   MX_ADC1_Init();
 243              		.loc 1 190 3 view .LVU58
 244 0086 FFF7FEFF 		bl	MX_TIM_Init
 245              	.LVL18:
 191:Src/main.c    ****   MX_ADC2_Init();
 246              		.loc 1 191 3 view .LVU59
ARM GAS  /var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//cco5HlIp.s 			page 16


 247 008a FFF7FEFF 		bl	MX_ADC1_Init
 248              	.LVL19:
 192:Src/main.c    ****   BLDC_Init();        // BLDC Controller Init
 249              		.loc 1 192 3 view .LVU60
 250 008e FFF7FEFF 		bl	MX_ADC2_Init
 251              	.LVL20:
 193:Src/main.c    **** 
 252              		.loc 1 193 3 view .LVU61
 253 0092 FFF7FEFF 		bl	BLDC_Init
 254              	.LVL21:
 195:Src/main.c    ****   Input_Lim_Init();   // Input Limitations Init
 255              		.loc 1 195 3 view .LVU62
 256 0096 0122     		movs	r2, #1
 257 0098 2021     		movs	r1, #32
 258 009a 1348     		ldr	r0, .L30+4
 259 009c FFF7FEFF 		bl	HAL_GPIO_WritePin
 260              	.LVL22:
 196:Src/main.c    ****   Input_Init();       // Input Init
 261              		.loc 1 196 3 view .LVU63
 262 00a0 FFF7FEFF 		bl	Input_Lim_Init
 263              	.LVL23:
 197:Src/main.c    **** 
 264              		.loc 1 197 3 view .LVU64
 265 00a4 FFF7FEFF 		bl	Input_Init
 266              	.LVL24:
 199:Src/main.c    ****   HAL_ADC_Start(&hadc2);
 267              		.loc 1 199 3 view .LVU65
 268 00a8 1048     		ldr	r0, .L30+8
 269 00aa FFF7FEFF 		bl	HAL_ADC_Start
 270              	.LVL25:
 200:Src/main.c    **** 
 271              		.loc 1 200 3 view .LVU66
 272 00ae 1048     		ldr	r0, .L30+12
 273 00b0 FFF7FEFF 		bl	HAL_ADC_Start
 274              	.LVL26:
 202:Src/main.c    ****   HAL_GPIO_WritePin(LED_PORT, LED_PIN, GPIO_PIN_SET);
 275              		.loc 1 202 3 view .LVU67
 276 00b4 FFF7FEFF 		bl	poweronMelody
 277              	.LVL27:
 203:Src/main.c    ****   
 278              		.loc 1 203 3 view .LVU68
 279 00b8 0122     		movs	r2, #1
 280 00ba 0421     		movs	r1, #4
 281 00bc 0D48     		ldr	r0, .L30+16
 282 00be FFF7FEFF 		bl	HAL_GPIO_WritePin
 283              	.LVL28:
 205:Src/main.c    ****   int16_t board_temp_adcFilt  = adc_buffer.temp;
 284              		.loc 1 205 3 view .LVU69
 205:Src/main.c    ****   int16_t board_temp_adcFilt  = adc_buffer.temp;
 285              		.loc 1 205 43 is_stmt 0 view .LVU70
 286 00c2 0D4A     		ldr	r2, .L30+20
 287 00c4 138A     		ldrh	r3, [r2, #16]
 205:Src/main.c    ****   int16_t board_temp_adcFilt  = adc_buffer.temp;
 288              		.loc 1 205 49 view .LVU71
 289 00c6 1B04     		lsls	r3, r3, #16
 205:Src/main.c    ****   int16_t board_temp_adcFilt  = adc_buffer.temp;
 290              		.loc 1 205 11 view .LVU72
ARM GAS  /var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//cco5HlIp.s 			page 17


 291 00c8 0793     		str	r3, [sp, #28]
 206:Src/main.c    **** 
 292              		.loc 1 206 3 is_stmt 1 view .LVU73
 206:Src/main.c    **** 
 293              		.loc 1 206 43 is_stmt 0 view .LVU74
 294 00ca 138A     		ldrh	r3, [r2, #16]
 295              	.LVL29:
 209:Src/main.c    **** 
 296              		.loc 1 209 3 is_stmt 1 view .LVU75
 209:Src/main.c    **** 
 297              		.loc 1 209 8 is_stmt 0 view .LVU76
 298 00cc 02E0     		b	.L6
 299              	.L7:
 209:Src/main.c    **** 
 300              		.loc 1 209 54 is_stmt 1 discriminator 2 view .LVU77
 301 00ce 0A20     		movs	r0, #10
 302 00d0 FFF7FEFF 		bl	HAL_Delay
 303              	.LVL30:
 304              	.L6:
 209:Src/main.c    **** 
 305              		.loc 1 209 8 discriminator 1 view .LVU78
 209:Src/main.c    **** 
 306              		.loc 1 209 9 is_stmt 0 discriminator 1 view .LVU79
 307 00d4 0221     		movs	r1, #2
 308 00d6 0448     		ldr	r0, .L30+4
 309 00d8 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 310              	.LVL31:
 209:Src/main.c    **** 
 311              		.loc 1 209 8 discriminator 1 view .LVU80
 312 00dc 0028     		cmp	r0, #0
 313 00de F6D1     		bne	.L7
 314 00e0 EEE0     		b	.L8
 315              	.L31:
 316 00e2 00BF     		.align	2
 317              	.L30:
 318 00e4 00100240 		.word	1073876992
 319 00e8 00080140 		.word	1073809408
 320 00ec 00000000 		.word	hadc1
 321 00f0 00000000 		.word	hadc2
 322 00f4 000C0140 		.word	1073810432
 323 00f8 00000000 		.word	adc_buffer
 324              	.L9:
 277:Src/main.c    ****       rateLimiter16(input2[inIdx].cmd , RATE, &speedRateFixdt);
 325              		.loc 1 277 7 is_stmt 1 view .LVU81
 326 00fc B14C     		ldr	r4, .L32
 327 00fe B24D     		ldr	r5, .L32+4
 328 0100 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 329 0102 C3EBC303 		rsb	r3, r3, r3, lsl #3
 330 0106 B14A     		ldr	r2, .L32+8
 331 0108 02EB4303 		add	r3, r2, r3, lsl #1
 332 010c 2246     		mov	r2, r4
 333 010e C821     		movs	r1, #200
 334 0110 B3F90200 		ldrsh	r0, [r3, #2]
 335 0114 FFF7FEFF 		bl	rateLimiter16
 336              	.LVL32:
 278:Src/main.c    ****       filtLowPass32(steerRateFixdt >> 4, FILTER, &steerFixdt);
 337              		.loc 1 278 7 view .LVU82
ARM GAS  /var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//cco5HlIp.s 			page 18


 338 0118 AD4E     		ldr	r6, .L32+12
 339 011a 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 340 011c C3EBC303 		rsb	r3, r3, r3, lsl #3
 341 0120 AC4A     		ldr	r2, .L32+16
 342 0122 02EB4303 		add	r3, r2, r3, lsl #1
 343 0126 3246     		mov	r2, r6
 344 0128 C821     		movs	r1, #200
 345 012a B3F90200 		ldrsh	r0, [r3, #2]
 346 012e FFF7FEFF 		bl	rateLimiter16
 347              	.LVL33:
 279:Src/main.c    ****       filtLowPass32(speedRateFixdt >> 4, FILTER, &speedFixdt);
 348              		.loc 1 279 7 view .LVU83
 349 0132 A94D     		ldr	r5, .L32+20
 350 0134 B4F90000 		ldrsh	r0, [r4]
 351 0138 2A46     		mov	r2, r5
 352 013a 41F69911 		movw	r1, #6553
 353 013e 0011     		asrs	r0, r0, #4
 354 0140 FFF7FEFF 		bl	filtLowPass32
 355              	.LVL34:
 280:Src/main.c    ****       steer = (int16_t)(steerFixdt >> 16);  // convert fixed-point to integer
 356              		.loc 1 280 7 view .LVU84
 357 0144 A54C     		ldr	r4, .L32+24
 358 0146 B6F90000 		ldrsh	r0, [r6]
 359 014a 2246     		mov	r2, r4
 360 014c 41F69911 		movw	r1, #6553
 361 0150 0011     		asrs	r0, r0, #4
 362 0152 FFF7FEFF 		bl	filtLowPass32
 363              	.LVL35:
 281:Src/main.c    ****       speed = (int16_t)(speedFixdt >> 16);  // convert fixed-point to integer
 364              		.loc 1 281 7 view .LVU85
 281:Src/main.c    ****       speed = (int16_t)(speedFixdt >> 16);  // convert fixed-point to integer
 365              		.loc 1 281 15 is_stmt 0 view .LVU86
 366 0156 B5F90210 		ldrsh	r1, [r5, #2]
 281:Src/main.c    ****       speed = (int16_t)(speedFixdt >> 16);  // convert fixed-point to integer
 367              		.loc 1 281 13 view .LVU87
 368 015a A14B     		ldr	r3, .L32+28
 369 015c 1980     		strh	r1, [r3]	@ movhi
 282:Src/main.c    **** 
 370              		.loc 1 282 7 is_stmt 1 view .LVU88
 282:Src/main.c    **** 
 371              		.loc 1 282 15 is_stmt 0 view .LVU89
 372 015e B4F90200 		ldrsh	r0, [r4, #2]
 282:Src/main.c    **** 
 373              		.loc 1 282 13 view .LVU90
 374 0162 A04B     		ldr	r3, .L32+32
 375 0164 1880     		strh	r0, [r3]	@ movhi
 299:Src/main.c    **** 
 376              		.loc 1 299 7 is_stmt 1 view .LVU91
 299:Src/main.c    **** 
 377              		.loc 1 299 22 is_stmt 0 view .LVU92
 378 0166 0001     		lsls	r0, r0, #4
 299:Src/main.c    **** 
 379              		.loc 1 299 34 view .LVU93
 380 0168 0901     		lsls	r1, r1, #4
 299:Src/main.c    **** 
 381              		.loc 1 299 7 view .LVU94
 382 016a 9F4C     		ldr	r4, .L32+36
ARM GAS  /var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//cco5HlIp.s 			page 19


 383 016c 9F4D     		ldr	r5, .L32+40
 384 016e 2346     		mov	r3, r4
 385 0170 2A46     		mov	r2, r5
 386 0172 09B2     		sxth	r1, r1
 387 0174 00B2     		sxth	r0, r0
 388 0176 FFF7FEFF 		bl	mixerFcn
 389              	.LVL36:
 305:Src/main.c    ****       #endif
 390              		.loc 1 305 9 is_stmt 1 view .LVU95
 305:Src/main.c    ****       #endif
 391              		.loc 1 305 16 is_stmt 0 view .LVU96
 392 017a B5F90030 		ldrsh	r3, [r5]
 393 017e 5B42     		rsbs	r3, r3, #0
 305:Src/main.c    ****       #endif
 394              		.loc 1 305 14 view .LVU97
 395 0180 9B4A     		ldr	r2, .L32+44
 396 0182 1360     		str	r3, [r2]
 310:Src/main.c    ****       #endif
 397              		.loc 1 310 9 is_stmt 1 view .LVU98
 310:Src/main.c    ****       #endif
 398              		.loc 1 310 14 is_stmt 0 view .LVU99
 399 0184 B4F90020 		ldrsh	r2, [r4]
 400 0188 9A4B     		ldr	r3, .L32+48
 401 018a 1A60     		str	r2, [r3]
 422:Src/main.c    ****     board_temp_adcFilt  = (int16_t)(board_temp_adcFixdt >> 16);  // convert fixed-point to integer
 402              		.loc 1 422 5 is_stmt 1 view .LVU100
 422:Src/main.c    ****     board_temp_adcFilt  = (int16_t)(board_temp_adcFixdt >> 16);  // convert fixed-point to integer
 403              		.loc 1 422 29 is_stmt 0 view .LVU101
 404 018c 9A4B     		ldr	r3, .L32+52
 405 018e 188A     		ldrh	r0, [r3, #16]
 422:Src/main.c    ****     board_temp_adcFilt  = (int16_t)(board_temp_adcFixdt >> 16);  // convert fixed-point to integer
 406              		.loc 1 422 5 view .LVU102
 407 0190 07AA     		add	r2, sp, #28
 408 0192 40F28F21 		movw	r1, #655
 409 0196 80B2     		uxth	r0, r0
 410 0198 FFF7FEFF 		bl	filtLowPass32
 411              	.LVL37:
 423:Src/main.c    ****     board_temp_deg_c    = (TEMP_CAL_HIGH_DEG_C - TEMP_CAL_LOW_DEG_C) * (board_temp_adcFilt - TEMP_C
 412              		.loc 1 423 5 is_stmt 1 view .LVU103
 423:Src/main.c    ****     board_temp_deg_c    = (TEMP_CAL_HIGH_DEG_C - TEMP_CAL_LOW_DEG_C) * (board_temp_adcFilt - TEMP_C
 413              		.loc 1 423 25 is_stmt 0 view .LVU104
 414 019c BDF91E00 		ldrsh	r0, [sp, #30]
 424:Src/main.c    **** 
 415              		.loc 1 424 5 is_stmt 1 view .LVU105
 424:Src/main.c    **** 
 416              		.loc 1 424 92 is_stmt 0 view .LVU106
 417 01a0 A0F27763 		subw	r3, r0, #1655
 424:Src/main.c    **** 
 418              		.loc 1 424 70 view .LVU107
 419 01a4 03EB8312 		add	r2, r3, r3, lsl #6
 420 01a8 03EB4203 		add	r3, r3, r2, lsl #1
 424:Src/main.c    **** 
 421              		.loc 1 424 112 view .LVU108
 422 01ac 934A     		ldr	r2, .L32+56
 423 01ae 82FB0312 		smull	r1, r2, r2, r3
 424 01b2 DB17     		asrs	r3, r3, #31
 425 01b4 A3EB6203 		sub	r3, r3, r2, asr #1
ARM GAS  /var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//cco5HlIp.s 			page 20


 424:Src/main.c    **** 
 426              		.loc 1 424 153 view .LVU109
 427 01b8 03F5B373 		add	r3, r3, #358
 428 01bc 1BB2     		sxth	r3, r3
 424:Src/main.c    **** 
 429              		.loc 1 424 25 view .LVU110
 430 01be 904A     		ldr	r2, .L32+60
 431 01c0 1380     		strh	r3, [r2]	@ movhi
 427:Src/main.c    **** 
 432              		.loc 1 427 5 is_stmt 1 view .LVU111
 427:Src/main.c    **** 
 433              		.loc 1 427 34 is_stmt 0 view .LVU112
 434 01c2 904A     		ldr	r2, .L32+64
 435 01c4 B2F90020 		ldrsh	r2, [r2]
 436 01c8 40F68271 		movw	r1, #3970
 437 01cc 01FB02F2 		mul	r2, r1, r2
 427:Src/main.c    **** 
 438              		.loc 1 427 59 view .LVU113
 439 01d0 01F1AF41 		add	r1, r1, #1468006400
 440 01d4 01F5B301 		add	r1, r1, #5865472
 441 01d8 01F24F11 		addw	r1, r1, #335
 442 01dc 81FB021C 		smull	r1, ip, r1, r2
 443 01e0 D117     		asrs	r1, r2, #31
 444 01e2 C1EB6C21 		rsb	r1, r1, ip, asr #9
 427:Src/main.c    **** 
 445              		.loc 1 427 21 view .LVU114
 446 01e6 09B2     		sxth	r1, r1
 447 01e8 874A     		ldr	r2, .L32+68
 448 01ea 1180     		strh	r1, [r2]	@ movhi
 430:Src/main.c    ****     right_dc_curr = -(rtU_Right.i_DCLink * 100) / A2BIT_CONV;  // Right DC Link Current * 100
 449              		.loc 1 430 5 is_stmt 1 view .LVU115
 430:Src/main.c    ****     right_dc_curr = -(rtU_Right.i_DCLink * 100) / A2BIT_CONV;  // Right DC Link Current * 100
 450              		.loc 1 430 31 is_stmt 0 view .LVU116
 451 01ec 874A     		ldr	r2, .L32+72
 452 01ee 9289     		ldrh	r2, [r2, #12]
 430:Src/main.c    ****     right_dc_curr = -(rtU_Right.i_DCLink * 100) / A2BIT_CONV;  // Right DC Link Current * 100
 453              		.loc 1 430 48 view .LVU117
 454 01f0 C2EBC232 		rsb	r2, r2, r2, lsl #15
 455 01f4 5200     		lsls	r2, r2, #1
 456 01f6 1FFA82FC 		uxth	ip, r2
 430:Src/main.c    ****     right_dc_curr = -(rtU_Right.i_DCLink * 100) / A2BIT_CONV;  // Right DC Link Current * 100
 457              		.loc 1 430 19 view .LVU118
 458 01fa 854C     		ldr	r4, .L32+76
 459 01fc 2280     		strh	r2, [r4]	@ movhi
 431:Src/main.c    ****     dc_curr       = left_dc_curr + right_dc_curr;            // Total DC Link Current * 100
 460              		.loc 1 431 5 is_stmt 1 view .LVU119
 431:Src/main.c    ****     dc_curr       = left_dc_curr + right_dc_curr;            // Total DC Link Current * 100
 461              		.loc 1 431 32 is_stmt 0 view .LVU120
 462 01fe 854A     		ldr	r2, .L32+80
 463 0200 9289     		ldrh	r2, [r2, #12]
 431:Src/main.c    ****     dc_curr       = left_dc_curr + right_dc_curr;            // Total DC Link Current * 100
 464              		.loc 1 431 49 view .LVU121
 465 0202 C2EBC232 		rsb	r2, r2, r2, lsl #15
 466 0206 5200     		lsls	r2, r2, #1
 467 0208 94B2     		uxth	r4, r2
 431:Src/main.c    ****     dc_curr       = left_dc_curr + right_dc_curr;            // Total DC Link Current * 100
 468              		.loc 1 431 19 view .LVU122
ARM GAS  /var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//cco5HlIp.s 			page 21


 469 020a 834D     		ldr	r5, .L32+84
 470 020c 2A80     		strh	r2, [r5]	@ movhi
 432:Src/main.c    **** 
 471              		.loc 1 432 5 is_stmt 1 view .LVU123
 432:Src/main.c    **** 
 472              		.loc 1 432 34 is_stmt 0 view .LVU124
 473 020e 0CEB0402 		add	r2, ip, r4
 432:Src/main.c    **** 
 474              		.loc 1 432 19 view .LVU125
 475 0212 824C     		ldr	r4, .L32+88
 476 0214 2280     		strh	r2, [r4]	@ movhi
 436:Src/main.c    ****         #if defined(DEBUG_SERIAL_PROTOCOL)
 477              		.loc 1 436 7 is_stmt 1 view .LVU126
 436:Src/main.c    ****         #if defined(DEBUG_SERIAL_PROTOCOL)
 478              		.loc 1 436 29 is_stmt 0 view .LVU127
 479 0216 824A     		ldr	r2, .L32+92
 480 0218 1468     		ldr	r4, [r2]
 481 021a 824A     		ldr	r2, .L32+96
 482 021c A2FB0452 		umull	r5, r2, r2, r4
 483 0220 D208     		lsrs	r2, r2, #3
 484 0222 02EB8202 		add	r2, r2, r2, lsl #2
 485 0226 02EB8202 		add	r2, r2, r2, lsl #2
 436:Src/main.c    ****         #if defined(DEBUG_SERIAL_PROTOCOL)
 486              		.loc 1 436 10 view .LVU128
 487 022a 9442     		cmp	r4, r2
 488 022c 00F08F80 		beq	.L25
 489              	.L10:
 486:Src/main.c    **** 
 490              		.loc 1 486 5 is_stmt 1 view .LVU129
 491 0230 FFF7FEFF 		bl	poweroffPressCheck
 492              	.LVL38:
 489:Src/main.c    ****       poweroff();
 493              		.loc 1 489 5 view .LVU130
 489:Src/main.c    ****       poweroff();
 494              		.loc 1 489 104 is_stmt 0 view .LVU131
 495 0234 734B     		ldr	r3, .L32+64
 496 0236 B3F90030 		ldrsh	r3, [r3]
 489:Src/main.c    ****       poweroff();
 497              		.loc 1 489 8 view .LVU132
 498 023a 40F2F142 		movw	r2, #1265
 499 023e 9342     		cmp	r3, r2
 500 0240 05DC     		bgt	.L11
 489:Src/main.c    ****       poweroff();
 501              		.loc 1 489 130 discriminator 1 view .LVU133
 502 0242 794A     		ldr	r2, .L32+100
 503 0244 B2F90020 		ldrsh	r2, [r2]
 489:Src/main.c    ****       poweroff();
 504              		.loc 1 489 89 discriminator 1 view .LVU134
 505 0248 132A     		cmp	r2, #19
 506 024a 40F39C80 		ble	.L26
 507              	.L11:
 491:Src/main.c    ****       enable = 0;
 508              		.loc 1 491 12 is_stmt 1 view .LVU135
 491:Src/main.c    ****       enable = 0;
 509              		.loc 1 491 24 is_stmt 0 view .LVU136
 510 024e 774A     		ldr	r2, .L32+104
 511 0250 9279     		ldrb	r2, [r2, #6]	@ zero_extendqisi2
ARM GAS  /var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//cco5HlIp.s 			page 22


 491:Src/main.c    ****       enable = 0;
 512              		.loc 1 491 15 view .LVU137
 513 0252 22B9     		cbnz	r2, .L13
 491:Src/main.c    ****       enable = 0;
 514              		.loc 1 491 47 discriminator 1 view .LVU138
 515 0254 764A     		ldr	r2, .L32+108
 516 0256 9279     		ldrb	r2, [r2, #6]	@ zero_extendqisi2
 491:Src/main.c    ****       enable = 0;
 517              		.loc 1 491 35 discriminator 1 view .LVU139
 518 0258 002A     		cmp	r2, #0
 519 025a 00F09780 		beq	.L14
 520              	.L13:
 492:Src/main.c    ****       beepCount(1, 24, 1);
 521              		.loc 1 492 7 is_stmt 1 view .LVU140
 492:Src/main.c    ****       beepCount(1, 24, 1);
 522              		.loc 1 492 14 is_stmt 0 view .LVU141
 523 025e 754B     		ldr	r3, .L32+112
 524 0260 0022     		movs	r2, #0
 525 0262 1A70     		strb	r2, [r3]
 493:Src/main.c    ****     } else if (timeoutFlgADC) {                                                                    
 526              		.loc 1 493 7 is_stmt 1 view .LVU142
 527 0264 0122     		movs	r2, #1
 528 0266 1821     		movs	r1, #24
 529 0268 1046     		mov	r0, r2
 530 026a FFF7FEFF 		bl	beepCount
 531              	.LVL39:
 532              	.L12:
 516:Src/main.c    ****       inactivity_timeout_counter = 0;
 533              		.loc 1 516 5 view .LVU143
 516:Src/main.c    ****       inactivity_timeout_counter = 0;
 534              		.loc 1 516 9 is_stmt 0 view .LVU144
 535 026e 5E4B     		ldr	r3, .L32+36
 536 0270 B3F90030 		ldrsh	r3, [r3]
 537 0274 002B     		cmp	r3, #0
 538 0276 B8BF     		it	lt
 539 0278 5B42     		rsblt	r3, r3, #0
 540 027a 9BB2     		uxth	r3, r3
 516:Src/main.c    ****       inactivity_timeout_counter = 0;
 541              		.loc 1 516 8 view .LVU145
 542 027c 322B     		cmp	r3, #50
 543 027e 09D8     		bhi	.L19
 516:Src/main.c    ****       inactivity_timeout_counter = 0;
 544              		.loc 1 516 27 discriminator 1 view .LVU146
 545 0280 5A4B     		ldr	r3, .L32+40
 546 0282 B3F90030 		ldrsh	r3, [r3]
 547 0286 002B     		cmp	r3, #0
 548 0288 B8BF     		it	lt
 549 028a 5B42     		rsblt	r3, r3, #0
 550 028c 9BB2     		uxth	r3, r3
 516:Src/main.c    ****       inactivity_timeout_counter = 0;
 551              		.loc 1 516 24 discriminator 1 view .LVU147
 552 028e 322B     		cmp	r3, #50
 553 0290 40F2FB80 		bls	.L20
 554              	.L19:
 517:Src/main.c    ****     } else {
 555              		.loc 1 517 7 is_stmt 1 view .LVU148
 517:Src/main.c    ****     } else {
ARM GAS  /var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//cco5HlIp.s 			page 23


 556              		.loc 1 517 34 is_stmt 0 view .LVU149
 557 0294 684B     		ldr	r3, .L32+116
 558 0296 0022     		movs	r2, #0
 559 0298 1A60     		str	r2, [r3]
 560              	.L21:
 521:Src/main.c    ****       poweroff();
 561              		.loc 1 521 5 is_stmt 1 view .LVU150
 521:Src/main.c    ****       poweroff();
 562              		.loc 1 521 36 is_stmt 0 view .LVU151
 563 029a 674B     		ldr	r3, .L32+116
 564 029c 1A68     		ldr	r2, [r3]
 521:Src/main.c    ****       poweroff();
 565              		.loc 1 521 8 view .LVU152
 566 029e 674B     		ldr	r3, .L32+120
 567 02a0 9A42     		cmp	r2, r3
 568 02a2 01D9     		bls	.L22
 522:Src/main.c    ****     }
 569              		.loc 1 522 7 is_stmt 1 view .LVU153
 570 02a4 FFF7FEFF 		bl	poweroff
 571              	.LVL40:
 572              	.L22:
 528:Src/main.c    ****     buzzerTimer_prev = buzzerTimer;
 573              		.loc 1 528 5 view .LVU154
 528:Src/main.c    ****     buzzerTimer_prev = buzzerTimer;
 574              		.loc 1 528 16 is_stmt 0 view .LVU155
 575 02a8 474B     		ldr	r3, .L32+4
 576 02aa 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 577 02ac 644B     		ldr	r3, .L32+124
 578 02ae 1A70     		strb	r2, [r3]
 529:Src/main.c    ****     main_loop_counter++;
 579              		.loc 1 529 5 is_stmt 1 view .LVU156
 529:Src/main.c    ****     main_loop_counter++;
 580              		.loc 1 529 22 is_stmt 0 view .LVU157
 581 02b0 644B     		ldr	r3, .L32+128
 582 02b2 1A68     		ldr	r2, [r3]
 583 02b4 644B     		ldr	r3, .L32+132
 584 02b6 1A60     		str	r2, [r3]
 530:Src/main.c    ****     }
 585              		.loc 1 530 5 is_stmt 1 view .LVU158
 530:Src/main.c    ****     }
 586              		.loc 1 530 22 is_stmt 0 view .LVU159
 587 02b8 594A     		ldr	r2, .L32+92
 588 02ba 1368     		ldr	r3, [r2]
 589 02bc 0133     		adds	r3, r3, #1
 590 02be 1360     		str	r3, [r2]
 591              	.L8:
 211:Src/main.c    ****     if (buzzerTimer - buzzerTimer_prev > 16*DELAY_IN_MAIN_LOOP) {   // 1 ms = 16 ticks buzzerTimer
 592              		.loc 1 211 3 is_stmt 1 view .LVU160
 212:Src/main.c    **** 
 593              		.loc 1 212 5 view .LVU161
 212:Src/main.c    **** 
 594              		.loc 1 212 21 is_stmt 0 view .LVU162
 595 02c0 604B     		ldr	r3, .L32+128
 596 02c2 1B68     		ldr	r3, [r3]
 597 02c4 604A     		ldr	r2, .L32+132
 598 02c6 1268     		ldr	r2, [r2]
 599 02c8 9B1A     		subs	r3, r3, r2
ARM GAS  /var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//cco5HlIp.s 			page 24


 212:Src/main.c    **** 
 600              		.loc 1 212 8 view .LVU163
 601 02ca 502B     		cmp	r3, #80
 602 02cc F8D9     		bls	.L8
 214:Src/main.c    ****     calcAvgSpeed();                       // Calculate average measured speed: speedAvg, speedAvgAb
 603              		.loc 1 214 5 is_stmt 1 view .LVU164
 604 02ce FFF7FEFF 		bl	readCommand
 605              	.LVL41:
 215:Src/main.c    **** 
 606              		.loc 1 215 5 view .LVU165
 607 02d2 FFF7FEFF 		bl	calcAvgSpeed
 608              	.LVL42:
 219:Src/main.c    ****         beepShort(6);                     // make 2 beeps indicating the motor enable
 609              		.loc 1 219 7 view .LVU166
 219:Src/main.c    ****         beepShort(6);                     // make 2 beeps indicating the motor enable
 610              		.loc 1 219 18 is_stmt 0 view .LVU167
 611 02d6 574B     		ldr	r3, .L32+112
 612 02d8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 219:Src/main.c    ****         beepShort(6);                     // make 2 beeps indicating the motor enable
 613              		.loc 1 219 10 view .LVU168
 614 02da 002B     		cmp	r3, #0
 615 02dc 7FF40EAF 		bne	.L9
 219:Src/main.c    ****         beepShort(6);                     // make 2 beeps indicating the motor enable
 616              		.loc 1 219 36 discriminator 1 view .LVU169
 617 02e0 524B     		ldr	r3, .L32+104
 618 02e2 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 219:Src/main.c    ****         beepShort(6);                     // make 2 beeps indicating the motor enable
 619              		.loc 1 219 23 discriminator 1 view .LVU170
 620 02e4 002B     		cmp	r3, #0
 621 02e6 7FF409AF 		bne	.L9
 219:Src/main.c    ****         beepShort(6);                     // make 2 beeps indicating the motor enable
 622              		.loc 1 219 60 discriminator 2 view .LVU171
 623 02ea 514B     		ldr	r3, .L32+108
 624 02ec 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 219:Src/main.c    ****         beepShort(6);                     // make 2 beeps indicating the motor enable
 625              		.loc 1 219 47 discriminator 2 view .LVU172
 626 02ee 002B     		cmp	r3, #0
 627 02f0 7FF404AF 		bne	.L9
 219:Src/main.c    ****         beepShort(6);                     // make 2 beeps indicating the motor enable
 628              		.loc 1 219 89 discriminator 3 view .LVU173
 629 02f4 344B     		ldr	r3, .L32+4
 630 02f6 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 631 02f8 C2EBC201 		rsb	r1, r2, r2, lsl #3
 632 02fc 334B     		ldr	r3, .L32+8
 633 02fe 03EB4103 		add	r3, r3, r1, lsl #1
 634 0302 B3F90230 		ldrsh	r3, [r3, #2]
 219:Src/main.c    ****         beepShort(6);                     // make 2 beeps indicating the motor enable
 635              		.loc 1 219 100 discriminator 3 view .LVU174
 636 0306 3133     		adds	r3, r3, #49
 637 0308 9BB2     		uxth	r3, r3
 219:Src/main.c    ****         beepShort(6);                     // make 2 beeps indicating the motor enable
 638              		.loc 1 219 72 discriminator 3 view .LVU175
 639 030a 622B     		cmp	r3, #98
 640 030c 3FF6F6AE 		bhi	.L9
 219:Src/main.c    ****         beepShort(6);                     // make 2 beeps indicating the motor enable
 641              		.loc 1 219 144 discriminator 4 view .LVU176
 642 0310 304B     		ldr	r3, .L32+16
ARM GAS  /var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//cco5HlIp.s 			page 25


 643 0312 03EB4102 		add	r2, r3, r1, lsl #1
 644 0316 B2F90230 		ldrsh	r3, [r2, #2]
 219:Src/main.c    ****         beepShort(6);                     // make 2 beeps indicating the motor enable
 645              		.loc 1 219 155 discriminator 4 view .LVU177
 646 031a 3133     		adds	r3, r3, #49
 647 031c 9BB2     		uxth	r3, r3
 219:Src/main.c    ****         beepShort(6);                     // make 2 beeps indicating the motor enable
 648              		.loc 1 219 127 discriminator 4 view .LVU178
 649 031e 622B     		cmp	r3, #98
 650 0320 3FF6ECAE 		bhi	.L9
 220:Src/main.c    ****         beepShort(4); HAL_Delay(100);
 651              		.loc 1 220 9 is_stmt 1 view .LVU179
 652 0324 0620     		movs	r0, #6
 653 0326 FFF7FEFF 		bl	beepShort
 654              	.LVL43:
 221:Src/main.c    ****         steerFixdt = speedFixdt = 0;      // reset filters
 655              		.loc 1 221 9 view .LVU180
 656 032a 0420     		movs	r0, #4
 657 032c FFF7FEFF 		bl	beepShort
 658              	.LVL44:
 221:Src/main.c    ****         steerFixdt = speedFixdt = 0;      // reset filters
 659              		.loc 1 221 23 view .LVU181
 660 0330 6420     		movs	r0, #100
 661 0332 FFF7FEFF 		bl	HAL_Delay
 662              	.LVL45:
 222:Src/main.c    ****         enable = 1;                       // enable motors
 663              		.loc 1 222 9 view .LVU182
 222:Src/main.c    ****         enable = 1;                       // enable motors
 664              		.loc 1 222 33 is_stmt 0 view .LVU183
 665 0336 0023     		movs	r3, #0
 666 0338 284A     		ldr	r2, .L32+24
 667 033a 1360     		str	r3, [r2]
 222:Src/main.c    ****         enable = 1;                       // enable motors
 668              		.loc 1 222 20 view .LVU184
 669 033c 264A     		ldr	r2, .L32+20
 670 033e 1360     		str	r3, [r2]
 223:Src/main.c    ****         #if defined(DEBUG_SERIAL_USART2) || defined(DEBUG_SERIAL_USART3)
 671              		.loc 1 223 9 is_stmt 1 view .LVU185
 223:Src/main.c    ****         #if defined(DEBUG_SERIAL_USART2) || defined(DEBUG_SERIAL_USART3)
 672              		.loc 1 223 16 is_stmt 0 view .LVU186
 673 0340 3C4B     		ldr	r3, .L32+112
 674 0342 0122     		movs	r2, #1
 675 0344 1A70     		strb	r2, [r3]
 225:Src/main.c    ****         #endif
 676              		.loc 1 225 9 is_stmt 1 view .LVU187
 677 0346 4148     		ldr	r0, .L32+136
 678 0348 FFF7FEFF 		bl	puts
 679              	.LVL46:
 680 034c D6E6     		b	.L9
 681              	.L25:
 440:Src/main.c    ****             input1[inIdx].raw,        // 1: INPUT1
 682              		.loc 1 440 11 view .LVU188
 441:Src/main.c    ****             input2[inIdx].raw,        // 2: INPUT2
 683              		.loc 1 441 26 is_stmt 0 view .LVU189
 684 034e 1E4A     		ldr	r2, .L32+4
 685 0350 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 686 0352 C2EBC205 		rsb	r5, r2, r2, lsl #3
ARM GAS  /var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//cco5HlIp.s 			page 26


 445:Src/main.c    ****             batVoltageCalib,          // 6: for verifying battery voltage calibration
 687              		.loc 1 445 23 view .LVU190
 688 0356 284C     		ldr	r4, .L32+52
 689 0358 A489     		ldrh	r4, [r4, #12]
 690 035a A4B2     		uxth	r4, r4
 440:Src/main.c    ****             input1[inIdx].raw,        // 1: INPUT1
 691              		.loc 1 440 11 view .LVU191
 692 035c 0493     		str	r3, [sp, #16]
 693 035e 0390     		str	r0, [sp, #12]
 694 0360 0291     		str	r1, [sp, #8]
 695 0362 0194     		str	r4, [sp, #4]
 696 0364 214B     		ldr	r3, .L32+40
 697 0366 B3F90030 		ldrsh	r3, [r3]
 698 036a 0093     		str	r3, [sp]
 699 036c 1E4B     		ldr	r3, .L32+36
 700 036e B3F90030 		ldrsh	r3, [r3]
 701 0372 1849     		ldr	r1, .L32+16
 702 0374 31F91520 		ldrsh	r2, [r1, r5, lsl #1]
 703 0378 1449     		ldr	r1, .L32+8
 704 037a 31F91510 		ldrsh	r1, [r1, r5, lsl #1]
 705 037e 3448     		ldr	r0, .L32+140
 706 0380 FFF7FEFF 		bl	printf
 707              	.LVL47:
 708 0384 54E7     		b	.L10
 709              	.L26:
 490:Src/main.c    ****     } else if (rtY_Left.z_errCode || rtY_Right.z_errCode) {                                        
 710              		.loc 1 490 7 is_stmt 1 view .LVU192
 711 0386 FFF7FEFF 		bl	poweroff
 712              	.LVL48:
 713 038a 70E7     		b	.L12
 714              	.L14:
 494:Src/main.c    ****       beepCount(2, 24, 1);
 715              		.loc 1 494 12 view .LVU193
 494:Src/main.c    ****       beepCount(2, 24, 1);
 716              		.loc 1 494 16 is_stmt 0 view .LVU194
 717 038c 314A     		ldr	r2, .L32+144
 718 038e 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 494:Src/main.c    ****       beepCount(2, 24, 1);
 719              		.loc 1 494 15 view .LVU195
 720 0390 8AB9     		cbnz	r2, .L27
 496:Src/main.c    ****       beepCount(3, 24, 1);
 721              		.loc 1 496 12 is_stmt 1 view .LVU196
 496:Src/main.c    ****       beepCount(3, 24, 1);
 722              		.loc 1 496 16 is_stmt 0 view .LVU197
 723 0392 314A     		ldr	r2, .L32+148
 724 0394 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 496:Src/main.c    ****       beepCount(3, 24, 1);
 725              		.loc 1 496 15 view .LVU198
 726 0396 002A     		cmp	r2, #0
 727 0398 62D1     		bne	.L28
 498:Src/main.c    ****       beepCount(4, 24, 1);
 728              		.loc 1 498 12 is_stmt 1 view .LVU199
 498:Src/main.c    ****       beepCount(4, 24, 1);
 729              		.loc 1 498 16 is_stmt 0 view .LVU200
 730 039a 304A     		ldr	r2, .L32+152
 731 039c 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 498:Src/main.c    ****       beepCount(4, 24, 1);
ARM GAS  /var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//cco5HlIp.s 			page 27


 732              		.loc 1 498 15 view .LVU201
 733 039e 002A     		cmp	r2, #0
 734 03a0 64D1     		bne	.L29
 500:Src/main.c    ****       beepCount(5, 24, 1);
 735              		.loc 1 500 12 is_stmt 1 view .LVU202
 502:Src/main.c    ****       beepCount(0, 10, 6);
 736              		.loc 1 502 12 view .LVU203
 502:Src/main.c    ****       beepCount(0, 10, 6);
 737              		.loc 1 502 15 is_stmt 0 view .LVU204
 738 03a2 40F22252 		movw	r2, #1314
 739 03a6 9342     		cmp	r3, r2
 740 03a8 66DC     		bgt	.L18
 503:Src/main.c    ****     } else if (BAT_LVL2_ENABLE && batVoltage < BAT_LVL2) {                                         
 741              		.loc 1 503 7 is_stmt 1 view .LVU205
 742 03aa 0622     		movs	r2, #6
 743 03ac 0A21     		movs	r1, #10
 744 03ae 0020     		movs	r0, #0
 745 03b0 FFF7FEFF 		bl	beepCount
 746              	.LVL49:
 747 03b4 5BE7     		b	.L12
 748              	.L27:
 495:Src/main.c    ****     } else if (timeoutFlgSerial) {                                                                 
 749              		.loc 1 495 7 view .LVU206
 750 03b6 0122     		movs	r2, #1
 751 03b8 1821     		movs	r1, #24
 752 03ba 0220     		movs	r0, #2
 753 03bc FFF7FEFF 		bl	beepCount
 754              	.LVL50:
 755 03c0 55E7     		b	.L12
 756              	.L33:
 757 03c2 00BF     		.align	2
 758              	.L32:
 759 03c4 00000000 		.word	.LANCHOR3
 760 03c8 00000000 		.word	inIdx
 761 03cc 00000000 		.word	input1
 762 03d0 00000000 		.word	.LANCHOR4
 763 03d4 00000000 		.word	input2
 764 03d8 00000000 		.word	.LANCHOR2
 765 03dc 00000000 		.word	.LANCHOR1
 766 03e0 00000000 		.word	.LANCHOR5
 767 03e4 00000000 		.word	.LANCHOR6
 768 03e8 00000000 		.word	.LANCHOR7
 769 03ec 00000000 		.word	.LANCHOR8
 770 03f0 00000000 		.word	pwmr
 771 03f4 00000000 		.word	pwml
 772 03f8 00000000 		.word	adc_buffer
 773 03fc 6B4CA407 		.word	128207979
 774 0400 00000000 		.word	.LANCHOR9
 775 0404 00000000 		.word	batVoltage
 776 0408 00000000 		.word	.LANCHOR10
 777 040c 00000000 		.word	rtU_Left
 778 0410 00000000 		.word	.LANCHOR11
 779 0414 00000000 		.word	rtU_Right
 780 0418 00000000 		.word	.LANCHOR12
 781 041c 00000000 		.word	.LANCHOR13
 782 0420 00000000 		.word	.LANCHOR14
 783 0424 1F85EB51 		.word	1374389535
ARM GAS  /var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//cco5HlIp.s 			page 28


 784 0428 00000000 		.word	speedAvgAbs
 785 042c 00000000 		.word	rtY_Left
 786 0430 00000000 		.word	rtY_Right
 787 0434 00000000 		.word	enable
 788 0438 00000000 		.word	.LANCHOR16
 789 043c 80380100 		.word	80000
 790 0440 00000000 		.word	inIdx_prev
 791 0444 00000000 		.word	buzzerTimer
 792 0448 00000000 		.word	.LANCHOR0
 793 044c 00000000 		.word	.LC0
 794 0450 18000000 		.word	.LC1
 795 0454 00000000 		.word	timeoutFlgADC
 796 0458 00000000 		.word	timeoutFlgSerial
 797 045c 00000000 		.word	timeoutFlgGen
 798              	.L28:
 497:Src/main.c    ****     } else if (timeoutFlgGen) {                                                                    
 799              		.loc 1 497 7 view .LVU207
 800 0460 0122     		movs	r2, #1
 801 0462 1821     		movs	r1, #24
 802 0464 0320     		movs	r0, #3
 803 0466 FFF7FEFF 		bl	beepCount
 804              	.LVL51:
 805 046a 00E7     		b	.L12
 806              	.L29:
 499:Src/main.c    ****     } else if (TEMP_WARNING_ENABLE && board_temp_deg_c >= TEMP_WARNING) {                          
 807              		.loc 1 499 7 view .LVU208
 808 046c 0122     		movs	r2, #1
 809 046e 1821     		movs	r1, #24
 810 0470 0420     		movs	r0, #4
 811 0472 FFF7FEFF 		bl	beepCount
 812              	.LVL52:
 813 0476 FAE6     		b	.L12
 814              	.L18:
 504:Src/main.c    ****       beepCount(0, 10, 30);
 815              		.loc 1 504 12 view .LVU209
 506:Src/main.c    ****       beepCount(0, 5, 1);
 816              		.loc 1 506 12 view .LVU210
 510:Src/main.c    ****       backwardDrive = 0;
 817              		.loc 1 510 7 view .LVU211
 818 0478 0022     		movs	r2, #0
 819 047a 1146     		mov	r1, r2
 820 047c 1046     		mov	r0, r2
 821 047e FFF7FEFF 		bl	beepCount
 822              	.LVL53:
 511:Src/main.c    ****     }
 823              		.loc 1 511 7 view .LVU212
 511:Src/main.c    ****     }
 824              		.loc 1 511 21 is_stmt 0 view .LVU213
 825 0482 044B     		ldr	r3, .L34
 826 0484 0022     		movs	r2, #0
 827 0486 1A70     		strb	r2, [r3]
 828 0488 F1E6     		b	.L12
 829              	.L20:
 519:Src/main.c    ****     }
 830              		.loc 1 519 7 is_stmt 1 view .LVU214
 519:Src/main.c    ****     }
 831              		.loc 1 519 33 is_stmt 0 view .LVU215
ARM GAS  /var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//cco5HlIp.s 			page 29


 832 048a 034A     		ldr	r2, .L34+4
 833 048c 1368     		ldr	r3, [r2]
 834 048e 0133     		adds	r3, r3, #1
 835 0490 1360     		str	r3, [r2]
 836 0492 02E7     		b	.L21
 837              	.L35:
 838              		.align	2
 839              	.L34:
 840 0494 00000000 		.word	.LANCHOR15
 841 0498 00000000 		.word	.LANCHOR16
 842              		.cfi_endproc
 843              	.LFE66:
 845              		.global	cmdR
 846              		.global	cmdL
 847              		.global	dc_curr
 848              		.global	right_dc_curr
 849              		.global	left_dc_curr
 850              		.global	board_temp_deg_c
 851              		.global	batVoltageCalib
 852              		.global	main_loop_counter
 853              		.global	backwardDrive
 854              		.global	uart_buf
 855              		.section	.bss.backwardDrive,"aw",%nobits
 856              		.set	.LANCHOR15,. + 0
 859              	backwardDrive:
 860 0000 00       		.space	1
 861              		.section	.bss.batVoltageCalib,"aw",%nobits
 862              		.align	1
 863              		.set	.LANCHOR10,. + 0
 866              	batVoltageCalib:
 867 0000 0000     		.space	2
 868              		.section	.bss.board_temp_deg_c,"aw",%nobits
 869              		.align	1
 870              		.set	.LANCHOR9,. + 0
 873              	board_temp_deg_c:
 874 0000 0000     		.space	2
 875              		.section	.bss.buzzerTimer_prev,"aw",%nobits
 876              		.align	2
 877              		.set	.LANCHOR0,. + 0
 880              	buzzerTimer_prev:
 881 0000 00000000 		.space	4
 882              		.section	.bss.cmdL,"aw",%nobits
 883              		.align	1
 884              		.set	.LANCHOR7,. + 0
 887              	cmdL:
 888 0000 0000     		.space	2
 889              		.section	.bss.cmdR,"aw",%nobits
 890              		.align	1
 891              		.set	.LANCHOR8,. + 0
 894              	cmdR:
 895 0000 0000     		.space	2
 896              		.section	.bss.dc_curr,"aw",%nobits
 897              		.align	1
 898              		.set	.LANCHOR13,. + 0
 901              	dc_curr:
 902 0000 0000     		.space	2
 903              		.section	.bss.inactivity_timeout_counter,"aw",%nobits
ARM GAS  /var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//cco5HlIp.s 			page 30


 904              		.align	2
 905              		.set	.LANCHOR16,. + 0
 908              	inactivity_timeout_counter:
 909 0000 00000000 		.space	4
 910              		.section	.bss.left_dc_curr,"aw",%nobits
 911              		.align	1
 912              		.set	.LANCHOR11,. + 0
 915              	left_dc_curr:
 916 0000 0000     		.space	2
 917              		.section	.bss.main_loop_counter,"aw",%nobits
 918              		.align	2
 919              		.set	.LANCHOR14,. + 0
 922              	main_loop_counter:
 923 0000 00000000 		.space	4
 924              		.section	.bss.right_dc_curr,"aw",%nobits
 925              		.align	1
 926              		.set	.LANCHOR12,. + 0
 929              	right_dc_curr:
 930 0000 0000     		.space	2
 931              		.section	.bss.speed,"aw",%nobits
 932              		.align	1
 933              		.set	.LANCHOR6,. + 0
 936              	speed:
 937 0000 0000     		.space	2
 938              		.section	.bss.speedFixdt,"aw",%nobits
 939              		.align	2
 940              		.set	.LANCHOR1,. + 0
 943              	speedFixdt:
 944 0000 00000000 		.space	4
 945              		.section	.bss.speedRateFixdt,"aw",%nobits
 946              		.align	1
 947              		.set	.LANCHOR4,. + 0
 950              	speedRateFixdt:
 951 0000 0000     		.space	2
 952              		.section	.bss.steer,"aw",%nobits
 953              		.align	1
 954              		.set	.LANCHOR5,. + 0
 957              	steer:
 958 0000 0000     		.space	2
 959              		.section	.bss.steerFixdt,"aw",%nobits
 960              		.align	2
 961              		.set	.LANCHOR2,. + 0
 964              	steerFixdt:
 965 0000 00000000 		.space	4
 966              		.section	.bss.steerRateFixdt,"aw",%nobits
 967              		.align	1
 968              		.set	.LANCHOR3,. + 0
 971              	steerRateFixdt:
 972 0000 0000     		.space	2
 973              		.section	.bss.uart_buf,"aw",%nobits
 974              		.align	2
 977              	uart_buf:
 978 0000 00000000 		.space	200
 978      00000000 
 978      00000000 
 978      00000000 
 978      00000000 
ARM GAS  /var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//cco5HlIp.s 			page 31


 979              		.text
 980              	.Letext0:
 981              		.file 2 "/usr/local/Caskroom/gcc-arm-embedded/10-2020-q4-major/gcc-arm-none-eabi-10-2020-q4-major/
 982              		.file 3 "/usr/local/Caskroom/gcc-arm-embedded/10-2020-q4-major/gcc-arm-none-eabi-10-2020-q4-major/
 983              		.file 4 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xe.h"
 984              		.file 5 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 985              		.file 6 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 986              		.file 7 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 987              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 988              		.file 9 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 989              		.file 10 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_adc.h"
 990              		.file 11 "Inc/defines.h"
 991              		.file 12 "Inc/util.h"
 992              		.file 13 "Inc/rtwtypes.h"
 993              		.file 14 "Inc/BLDC_controller.h"
 994              		.file 15 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_cortex.h"
 995              		.file 16 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 996              		.file 17 "Inc/setup.h"
 997              		.file 18 "/usr/local/Caskroom/gcc-arm-embedded/10-2020-q4-major/gcc-arm-none-eabi-10-2020-q4-major
 998              		.file 19 "<built-in>"
ARM GAS  /var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//cco5HlIp.s 			page 32


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
/var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//cco5HlIp.s:16     .text.SystemClock_Config:0000000000000000 $t
/var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//cco5HlIp.s:24     .text.SystemClock_Config:0000000000000000 SystemClock_Config
/var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//cco5HlIp.s:132    .text.SystemClock_Config:0000000000000070 $d
/var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//cco5HlIp.s:137    .rodata.main.str1.4:0000000000000000 $d
/var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//cco5HlIp.s:145    .text.main:0000000000000000 $t
/var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//cco5HlIp.s:152    .text.main:0000000000000000 main
/var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//cco5HlIp.s:318    .text.main:00000000000000e4 $d
/var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//cco5HlIp.s:326    .text.main:00000000000000fc $t
/var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//cco5HlIp.s:759    .text.main:00000000000003c4 $d
/var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//cco5HlIp.s:800    .text.main:0000000000000460 $t
/var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//cco5HlIp.s:840    .text.main:0000000000000494 $d
/var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//cco5HlIp.s:894    .bss.cmdR:0000000000000000 cmdR
/var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//cco5HlIp.s:887    .bss.cmdL:0000000000000000 cmdL
/var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//cco5HlIp.s:901    .bss.dc_curr:0000000000000000 dc_curr
/var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//cco5HlIp.s:929    .bss.right_dc_curr:0000000000000000 right_dc_curr
/var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//cco5HlIp.s:915    .bss.left_dc_curr:0000000000000000 left_dc_curr
/var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//cco5HlIp.s:873    .bss.board_temp_deg_c:0000000000000000 board_temp_deg_c
/var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//cco5HlIp.s:866    .bss.batVoltageCalib:0000000000000000 batVoltageCalib
/var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//cco5HlIp.s:922    .bss.main_loop_counter:0000000000000000 main_loop_counter
/var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//cco5HlIp.s:859    .bss.backwardDrive:0000000000000000 backwardDrive
/var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//cco5HlIp.s:977    .bss.uart_buf:0000000000000000 uart_buf
/var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//cco5HlIp.s:860    .bss.backwardDrive:0000000000000000 $d
/var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//cco5HlIp.s:862    .bss.batVoltageCalib:0000000000000000 $d
/var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//cco5HlIp.s:869    .bss.board_temp_deg_c:0000000000000000 $d
/var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//cco5HlIp.s:876    .bss.buzzerTimer_prev:0000000000000000 $d
/var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//cco5HlIp.s:880    .bss.buzzerTimer_prev:0000000000000000 buzzerTimer_prev
/var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//cco5HlIp.s:883    .bss.cmdL:0000000000000000 $d
/var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//cco5HlIp.s:890    .bss.cmdR:0000000000000000 $d
/var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//cco5HlIp.s:897    .bss.dc_curr:0000000000000000 $d
/var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//cco5HlIp.s:904    .bss.inactivity_timeout_counter:0000000000000000 $d
/var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//cco5HlIp.s:908    .bss.inactivity_timeout_counter:0000000000000000 inactivity_timeout_counter
/var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//cco5HlIp.s:911    .bss.left_dc_curr:0000000000000000 $d
/var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//cco5HlIp.s:918    .bss.main_loop_counter:0000000000000000 $d
/var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//cco5HlIp.s:925    .bss.right_dc_curr:0000000000000000 $d
/var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//cco5HlIp.s:932    .bss.speed:0000000000000000 $d
/var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//cco5HlIp.s:936    .bss.speed:0000000000000000 speed
/var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//cco5HlIp.s:939    .bss.speedFixdt:0000000000000000 $d
/var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//cco5HlIp.s:943    .bss.speedFixdt:0000000000000000 speedFixdt
/var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//cco5HlIp.s:946    .bss.speedRateFixdt:0000000000000000 $d
/var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//cco5HlIp.s:950    .bss.speedRateFixdt:0000000000000000 speedRateFixdt
/var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//cco5HlIp.s:953    .bss.steer:0000000000000000 $d
/var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//cco5HlIp.s:957    .bss.steer:0000000000000000 steer
/var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//cco5HlIp.s:960    .bss.steerFixdt:0000000000000000 $d
/var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//cco5HlIp.s:964    .bss.steerFixdt:0000000000000000 steerFixdt
/var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//cco5HlIp.s:967    .bss.steerRateFixdt:0000000000000000 $d
/var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//cco5HlIp.s:971    .bss.steerRateFixdt:0000000000000000 steerRateFixdt
/var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//cco5HlIp.s:974    .bss.uart_buf:0000000000000000 $d

UNDEFINED SYMBOLS
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
ARM GAS  /var/folders/95/w0y5d13j6379kd25_hkgs4sr0000gn/T//cco5HlIp.s 			page 33


HAL_NVIC_SetPriority
HAL_Init
HAL_NVIC_SetPriorityGrouping
MX_GPIO_Init
MX_TIM_Init
MX_ADC1_Init
MX_ADC2_Init
BLDC_Init
HAL_GPIO_WritePin
Input_Lim_Init
Input_Init
HAL_ADC_Start
poweronMelody
HAL_Delay
HAL_GPIO_ReadPin
hadc1
hadc2
adc_buffer
rateLimiter16
filtLowPass32
mixerFcn
poweroffPressCheck
beepCount
poweroff
readCommand
calcAvgSpeed
beepShort
puts
printf
inIdx
input1
input2
pwmr
pwml
batVoltage
rtU_Left
rtU_Right
speedAvgAbs
rtY_Left
rtY_Right
enable
inIdx_prev
buzzerTimer
timeoutFlgADC
timeoutFlgSerial
timeoutFlgGen
